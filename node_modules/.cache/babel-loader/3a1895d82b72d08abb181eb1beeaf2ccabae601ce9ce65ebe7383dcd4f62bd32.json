{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.updatePointerPosition = exports.setPointerMode = exports.notifyPointerMove = exports.notifyKeyDown = exports.hasPointerMoved = exports.getPointerMode = exports.getLastPointerPosition = void 0;\nvar _keymap = require(\"@enact/core/keymap\");\nvar _util = require(\"@enact/core/util\");\n/**\n * Exports methods and members for working with pointer events in spotlight\n *\n * @module spotlight/pointer\n * @private\n */\n\n/*\n * Whether Spotlight is in pointer mode (as opposed to 5-way mode).\n *\n * @type {Boolean}\n * @default true\n * @private\n */\nvar _pointerMode = true;\n\n/**\n * Sets the current pointer mode\n *\n * @param   {Boolean} pointerMode `true` to enable pointer mode; `false` to disable pointer mode\n * @memberof spotlight/pointer\n * @private\n */\nvar setPointerMode = function setPointerMode(pointerMode) {\n  _pointerMode = pointerMode;\n};\n\n/**\n * Gets the current pointer mode\n *\n * @returns {Boolean} The current state of pointer mode\n * @memberof spotlight/pointer\n * @private\n */\nexports.setPointerMode = setPointerMode;\nvar getPointerMode = function getPointerMode() {\n  return _pointerMode;\n};\n\n// Cached pointer position\nexports.getPointerMode = getPointerMode;\nvar _pointerX = null;\nvar _pointerY = null;\n\n/**\n * Returns whether or not the current pointer position matches the provided coordinates\n *\n * @param   {Number} x Pointer position relative to the left side of the viewport\n * @param   {Number} y Pointer position relative to the top side of the viewport\n *\n * @returns {Boolean}   `true` if the position was changed\n * @memberof spotlight/pointer\n * @private\n */\nvar hasPointerMoved = function hasPointerMoved(x, y) {\n  return x !== _pointerX || y !== _pointerY;\n};\n\n/**\n * Updates the cached pointer position, updating the current pointer mode when the position has\n * changed.\n *\n * @param   {Number} x Pointer position relative to the left side of the viewport\n * @param   {Number} y Pointer position relative to the top side of the viewport\n *\n * @returns {Boolean}   `true` if the position was updated\n * @memberof spotlight/pointer\n * @private\n */\nexports.hasPointerMoved = hasPointerMoved;\nvar updatePointerPosition = function updatePointerPosition(x, y) {\n  // Chrome emits mousemove on scroll, but client coordinates do not change.\n  if (hasPointerMoved(x, y)) {\n    setPointerMode(true);\n    _pointerX = x;\n    _pointerY = y;\n    return true;\n  }\n  return false;\n};\n\n/**\n * Returns the last known position of the pointer\n *\n * @returns {Object} Contains `x` and `y` coordinates for the pointer\n * @memberof spotlight/pointer\n * @private\n */\nexports.updatePointerPosition = updatePointerPosition;\nvar getLastPointerPosition = function getLastPointerPosition() {\n  return {\n    x: _pointerX,\n    y: _pointerY\n  };\n};\n\n// 30ms (_pointerHiddenToKeyTimeout) is semi-arbitrary, to account for the time it takes for the\n// following directional key event to fire, and to prevent momentary spotting of the last\n// focused item - needs to be a value large enough to account for the potentially-trailing\n// event, but not too large that another unrelated event can be fired inside the window\nexports.getLastPointerPosition = getLastPointerPosition;\nvar hidePointerJob = new _util.Job(function (callback) {\n  setPointerMode(false);\n  if (callback) {\n    callback();\n  }\n}, 30);\n\n/**\n * Notifies spotlight of a change in the pointer position\n *\n * @param   {Node}     target   Node under the pointer\n * @param   {Number}   x        Horizontal position relative to the left side of the viewport\n * @param   {Number}   y        Vertical position relative to the top side of the viewport\n *\n * @returns {Boolean}           `true` if the change in position results in a change in focus\n * @memberof spotlight/pointer\n * @private\n */\nvar notifyPointerMove = function notifyPointerMove(current, target, x, y) {\n  var priorPointerMode = getPointerMode();\n  if (updatePointerPosition(x, y)) {\n    // if we're entering pointer mode and the target element isn't within the currently\n    // focused element, there may be a new navigable target\n    return !priorPointerMode || !current || !current.contains(target);\n  }\n\n  // the pointer hasn't actually moved (surprise!)\n  return false;\n};\n\n/**\n * Notifies the pointer module of key events. If the pointer should be hidden, a timer is set and\n * `callback` is invoked after the timer has expired and pointer mode has been disabled. For any\n * other type of key event, pointer mode is disabled and `false` is returned.\n *\n * @param   {Number}    keyCode     Key event key code\n * @param   {Function}  [callback]  Optional callback to invoke upon hiding the pointer.\n *\n * @returns {Boolean}               `true` for pointer hide or show key events\n * @memberof spotlight/pointer\n * @private\n */\nexports.notifyPointerMove = notifyPointerMove;\nvar notifyKeyDown = function notifyKeyDown(keyCode, callback) {\n  var palmSystem = window.PalmSystem;\n\n  // for hide/show pointer events, handle them and return true\n  if ((0, _keymap.is)('pointerHide', keyCode)) {\n    hidePointerJob.start(callback);\n    return true;\n  } else if ((0, _keymap.is)('pointerShow', keyCode)) {\n    setPointerMode(true);\n    return true;\n  } else if (!(0, _keymap.is)('nonModal', keyCode) && !(0, _keymap.is)('cancel', keyCode) && !((0, _keymap.is)('enter', keyCode) && palmSystem && palmSystem.cursor && palmSystem.cursor.visibility)) {\n    setPointerMode(false);\n  }\n  return false;\n};\nexports.notifyKeyDown = notifyKeyDown;","map":{"version":3,"names":["Object","defineProperty","exports","value","updatePointerPosition","setPointerMode","notifyPointerMove","notifyKeyDown","hasPointerMoved","getPointerMode","getLastPointerPosition","_keymap","require","_util","_pointerMode","pointerMode","_pointerX","_pointerY","x","y","hidePointerJob","Job","callback","current","target","priorPointerMode","contains","keyCode","palmSystem","window","PalmSystem","is","start","cursor","visibility"],"sources":["/Users/gitchan/Projects/gitchan-yonsei/2024-enact-template/node_modules/@enact/spotlight/src/pointer.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.updatePointerPosition = exports.setPointerMode = exports.notifyPointerMove = exports.notifyKeyDown = exports.hasPointerMoved = exports.getPointerMode = exports.getLastPointerPosition = void 0;\nvar _keymap = require(\"@enact/core/keymap\");\nvar _util = require(\"@enact/core/util\");\n/**\n * Exports methods and members for working with pointer events in spotlight\n *\n * @module spotlight/pointer\n * @private\n */\n\n/*\n * Whether Spotlight is in pointer mode (as opposed to 5-way mode).\n *\n * @type {Boolean}\n * @default true\n * @private\n */\nvar _pointerMode = true;\n\n/**\n * Sets the current pointer mode\n *\n * @param   {Boolean} pointerMode `true` to enable pointer mode; `false` to disable pointer mode\n * @memberof spotlight/pointer\n * @private\n */\nvar setPointerMode = function setPointerMode(pointerMode) {\n  _pointerMode = pointerMode;\n};\n\n/**\n * Gets the current pointer mode\n *\n * @returns {Boolean} The current state of pointer mode\n * @memberof spotlight/pointer\n * @private\n */\nexports.setPointerMode = setPointerMode;\nvar getPointerMode = function getPointerMode() {\n  return _pointerMode;\n};\n\n// Cached pointer position\nexports.getPointerMode = getPointerMode;\nvar _pointerX = null;\nvar _pointerY = null;\n\n/**\n * Returns whether or not the current pointer position matches the provided coordinates\n *\n * @param   {Number} x Pointer position relative to the left side of the viewport\n * @param   {Number} y Pointer position relative to the top side of the viewport\n *\n * @returns {Boolean}   `true` if the position was changed\n * @memberof spotlight/pointer\n * @private\n */\nvar hasPointerMoved = function hasPointerMoved(x, y) {\n  return x !== _pointerX || y !== _pointerY;\n};\n\n/**\n * Updates the cached pointer position, updating the current pointer mode when the position has\n * changed.\n *\n * @param   {Number} x Pointer position relative to the left side of the viewport\n * @param   {Number} y Pointer position relative to the top side of the viewport\n *\n * @returns {Boolean}   `true` if the position was updated\n * @memberof spotlight/pointer\n * @private\n */\nexports.hasPointerMoved = hasPointerMoved;\nvar updatePointerPosition = function updatePointerPosition(x, y) {\n  // Chrome emits mousemove on scroll, but client coordinates do not change.\n  if (hasPointerMoved(x, y)) {\n    setPointerMode(true);\n    _pointerX = x;\n    _pointerY = y;\n    return true;\n  }\n  return false;\n};\n\n/**\n * Returns the last known position of the pointer\n *\n * @returns {Object} Contains `x` and `y` coordinates for the pointer\n * @memberof spotlight/pointer\n * @private\n */\nexports.updatePointerPosition = updatePointerPosition;\nvar getLastPointerPosition = function getLastPointerPosition() {\n  return {\n    x: _pointerX,\n    y: _pointerY\n  };\n};\n\n// 30ms (_pointerHiddenToKeyTimeout) is semi-arbitrary, to account for the time it takes for the\n// following directional key event to fire, and to prevent momentary spotting of the last\n// focused item - needs to be a value large enough to account for the potentially-trailing\n// event, but not too large that another unrelated event can be fired inside the window\nexports.getLastPointerPosition = getLastPointerPosition;\nvar hidePointerJob = new _util.Job(function (callback) {\n  setPointerMode(false);\n  if (callback) {\n    callback();\n  }\n}, 30);\n\n/**\n * Notifies spotlight of a change in the pointer position\n *\n * @param   {Node}     target   Node under the pointer\n * @param   {Number}   x        Horizontal position relative to the left side of the viewport\n * @param   {Number}   y        Vertical position relative to the top side of the viewport\n *\n * @returns {Boolean}           `true` if the change in position results in a change in focus\n * @memberof spotlight/pointer\n * @private\n */\nvar notifyPointerMove = function notifyPointerMove(current, target, x, y) {\n  var priorPointerMode = getPointerMode();\n  if (updatePointerPosition(x, y)) {\n    // if we're entering pointer mode and the target element isn't within the currently\n    // focused element, there may be a new navigable target\n    return !priorPointerMode || !current || !current.contains(target);\n  }\n\n  // the pointer hasn't actually moved (surprise!)\n  return false;\n};\n\n/**\n * Notifies the pointer module of key events. If the pointer should be hidden, a timer is set and\n * `callback` is invoked after the timer has expired and pointer mode has been disabled. For any\n * other type of key event, pointer mode is disabled and `false` is returned.\n *\n * @param   {Number}    keyCode     Key event key code\n * @param   {Function}  [callback]  Optional callback to invoke upon hiding the pointer.\n *\n * @returns {Boolean}               `true` for pointer hide or show key events\n * @memberof spotlight/pointer\n * @private\n */\nexports.notifyPointerMove = notifyPointerMove;\nvar notifyKeyDown = function notifyKeyDown(keyCode, callback) {\n  var palmSystem = window.PalmSystem;\n\n  // for hide/show pointer events, handle them and return true\n  if ((0, _keymap.is)('pointerHide', keyCode)) {\n    hidePointerJob.start(callback);\n    return true;\n  } else if ((0, _keymap.is)('pointerShow', keyCode)) {\n    setPointerMode(true);\n    return true;\n  } else if (!(0, _keymap.is)('nonModal', keyCode) && !(0, _keymap.is)('cancel', keyCode) && !((0, _keymap.is)('enter', keyCode) && palmSystem && palmSystem.cursor && palmSystem.cursor.visibility)) {\n    setPointerMode(false);\n  }\n  return false;\n};\nexports.notifyKeyDown = notifyKeyDown;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}