{"ast":null,"code":"\"use strict\";\n\n/* eslint-env browser,es6 */\n/*\n * zoneinfo.js - represent a binary zone info file\n *\n * Copyright Â© 2014 LG Electronics, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * The portion of this code that parses the zone info file format is derived\n * from the code in the node-zoneinfo project by Gregory McWhirter licensed\n * under the MIT license:\n *\n * Copyright (c) 2013 Gregory McWhirter\n *\n * Permission is hereby granted, free of charge, to any person obtaining\n * a copy of this software and associated documentation files (the\n * \"Software\"), to deal in the Software without restriction, including\n * without limitation the rights to use, copy, modify, merge, publish,\n * distribute, sublicense, and/or sell copies of the Software, and to\n * permit persons to whom the Software is furnished to do so, subject\n * to the following conditions:\n\n * The above copyright notice and this permission notice shall be included\n * in all copies or substantial portions of the Software.\n\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL\n * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR\n * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\n * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\n * OTHER DEALINGS IN THE SOFTWARE.\n */\nvar PackedBuffer = require('./packedbuffer.js');\nvar _platform = typeof PalmSystem !== 'undefined' ? 'webos' : 'browser';\n\n/**\n * Represents a binary zone info file of the sort that the Unix Zone Info Compiler\n * produces.\n * @constructor\n * @param {string} path path to the file to be loaded\n * @param {number} year year of the zone info rules needed\n */\nvar ZoneInfoFile = function ZoneInfoFile(path) {\n  var that = this;\n  switch (_platform) {\n    /*\n    Uncomment and use this when enyo works for binary load.\n    case 'enyo':\n    \tlet ajax = new enyo.Ajax({\n    \t\txhrFields: {\n    \t\t\tresponseType:'arraybuffer'\n    \t\t},\n    \t\tcacheBust: false,\n    \t\tsync: true,\n    \t\thandleAs: 'binary',\n    \t\turl: 'file://' + path\n    \t});\n    \tajax.response(this, function (s, r) {\n    \t\tlet byteArray = new Uint8Array(r);\n    \t\t// console.log('ZoneInfoFile bytes received: ' + byteArray.length);\n    \t\tthat._parseInfo(byteArray);\n    \t});\n    \t//ajax.error(this, function (s, r) {\n    \t//\tconsole.log('ZoneInfoFile: failed to load files ' + JSON.stringify(s) + ' ' + r);\n    \t//});\n    \tajax.go();\n    \tbreak;\n    */\n\n    default:\n      {\n        // use normal web techniques for sync binary data fetching\n        // see https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/Sending_and_Receiving_Binary_Data\n        var req = new XMLHttpRequest();\n        req.open('GET', 'file:' + path, false);\n        req.overrideMimeType('text/plain; charset=x-user-defined');\n        req.onload = function () {\n          var byteArray = new Uint8Array(req.response.length);\n          for (var i = 0; i < req.response.length; i++) {\n            byteArray[i] = req.response.charCodeAt(i) & 0xff;\n          }\n          // console.log('ZoneInfoFile bytes received: ' + byteArray.length);\n          that._parseInfo(byteArray);\n        };\n        req.onerror = function () {\n          throw new Error('Cannot load file ' + path);\n        };\n        req.send();\n        break;\n      }\n  }\n};\n\n/**\n * @private\n * Parse the binary buffer to find the zone info\n * @param {Buffer} buffer The buffer to process\n * @returns {void}\n */\nZoneInfoFile.prototype._parseInfo = function (buffer) {\n  var packed = new PackedBuffer(buffer);\n\n  // The time zone information files used by tzset(3)\n  // begin with the magic characters 'TZif' to identify\n  // them as time zone information files, followed by\n  // sixteen bytes reserved for future use, followed by\n  // six four-byte values of type long, written in a\n  // ''standard'' byte order (the high-order byte\n  // of the value is written first).\n  if (packed.getString(4) !== 'TZif') {\n    throw new Error('file format not recognized');\n  } else {\n    // ignore 16 bytes\n    packed.skip(16);\n\n    /* eslint-disable camelcase */\n    // The number of UTC/local indicators stored in the file.\n    var tzh_ttisgmtcnt = packed.getLong();\n    // The number of standard/wall indicators stored in the file.\n    var tzh_ttisstdcnt = packed.getLong();\n    // The number of leap seconds for which data is stored in the file.\n    var tzh_leapcnt = packed.getLong();\n    // The number of 'transition times' for which data is stored in the file.\n    var tzh_timecnt = packed.getLong();\n    // The number of 'local time types' for which data is stored in the file (must not be zero).\n    var tzh_typecnt = packed.getLong();\n    // The number of characters of 'time zone abbreviation strings' stored in the file.\n    var tzh_charcnt = packed.getLong();\n    this.transitionTimes = tzh_timecnt ? packed.getLongs(tzh_timecnt) : [];\n    this.transitionTimes = this.transitionTimes.map(function (item) {\n      return item * 1000;\n    });\n\n    // these are indexes into the zonesInfo that correspond to each transition time\n    this.ruleIndex = tzh_timecnt ? packed.getUnsignedBytes(tzh_timecnt) : [];\n    this.zoneInfo = [];\n    for (var i = 0; i < tzh_typecnt; i++) {\n      this.zoneInfo.push({\n        offset: Math.floor(packed.getLong() / 60),\n        // offset in seconds, so convert to minutes\n        isdst: !!packed.getByte(),\n        abbreviationIndex: packed.getByte()\n      });\n    }\n    var allAbbreviations = packed.getString(tzh_charcnt);\n    for (var _i = 0; _i < tzh_typecnt; _i++) {\n      var abbreviation = allAbbreviations.substring(this.zoneInfo[_i].abbreviationIndex);\n      this.zoneInfo[_i].abbreviation = abbreviation.substring(0, abbreviation.indexOf('\\x00'));\n    }\n\n    // ignore the leap seconds\n    if (tzh_leapcnt) {\n      packed.skip(tzh_leapcnt * 2);\n    }\n\n    // skip the standard/wall time indicators\n    if (tzh_ttisstdcnt) {\n      packed.skip(tzh_ttisstdcnt);\n    }\n\n    // ignore the UTC/local time indicators -- everything should be UTC\n    if (tzh_ttisgmtcnt) {\n      packed.skip(tzh_ttisgmtcnt);\n    }\n\n    // finished reading\n\n    // Replace ttinfo indexes for ttinfo objects.\n    var that = this;\n    this.ruleIndex = this.ruleIndex.map(function (item) {\n      return {\n        offset: that.zoneInfo[item].offset,\n        isdst: that.zoneInfo[item].isdst,\n        abbreviation: that.zoneInfo[item].abbreviation\n      };\n    });\n\n    // calculate the dst savings for each daylight time\n    for (var _i2 = 0; _i2 < tzh_timecnt; _i2++) {\n      if (_i2 > 0 && this.ruleIndex[_i2].isdst) {\n        this.ruleIndex[_i2].savings = this.ruleIndex[_i2].offset - this.ruleIndex[_i2 - 1].offset;\n      }\n    }\n\n    // Set standard, dst, and before ttinfos. before will be\n    // used when a given time is before any transitions,\n    // and will be set to the first non-dst ttinfo, or to\n    // the first dst, if all of them are dst.\n    if (!this.transitionTimes.length) {\n      this.standardTime = this.zoneInfo[0];\n    } else {\n      for (var j = tzh_timecnt - 1; j > -1; j--) {\n        var tti = this.ruleIndex[j];\n        if (!this.standardTime && !tti.isdst) {\n          this.standardTime = tti;\n        } else if (!this.daylightTime && tti.isdst) {\n          this.daylightTime = tti;\n        }\n        if (this.daylightTime && this.standardTime) {\n          break;\n        }\n      }\n      if (this.daylightTime && !this.standardTime) {\n        this.standardTime = this.daylightTime;\n      }\n      for (var k = this.zoneInfo.length - 1; k > 0; k--) {\n        if (!this.zoneInfo[k].isdst) {\n          this.defaultTime = this.zoneInfo[k];\n          break;\n        }\n      }\n    }\n    if (!this.defaultTime) {\n      this.defaultTime = this.zoneInfo[this.zoneInfo.length - 1];\n    }\n  }\n};\n\n/**\n * Binary search a sorted array of numbers for a particular target value.\n * If the exact value is not found, it returns the index of the largest\n * entry that is smaller than the given target value.<p>\n *\n * @param {number} target element being sought\n * @param {Array} arr the array being searched\n * @returns {number} the index of the array into which the value would fit if\n * inserted, or -1 if given array is not an array or the target is not\n * a number\n */\nZoneInfoFile.prototype.bsearch = function (target, arr) {\n  if (typeof arr === 'undefined' || !arr || typeof target === 'undefined' || target < arr[0]) {\n    return -1;\n  }\n\n  // greater than the end of the array\n  if (target > arr[arr.length - 1]) {\n    return arr.length - 1;\n  }\n  var high = arr.length - 1,\n    low = 0,\n    mid = 0,\n    value;\n  while (low <= high) {\n    mid = Math.floor((high + low) / 2);\n    value = arr[mid] - target;\n    if (value > 0) {\n      high = mid - 1;\n    } else if (value < 0) {\n      low = mid + 1;\n    } else {\n      return mid;\n    }\n  }\n  return high;\n};\n\n/**\n * Return whether or not this zone uses DST in the given year.\n *\n * @param {Date} date the Gregorian date to test\n * @returns {boolean} true if the zone uses DST in the given year\n */\nZoneInfoFile.prototype.usesDST = function (date) {\n  var thisYear = date.getTime();\n  var nextYear = thisYear + 31536000000; // this is the number of ms in 1 Gregorian year\n\n  // search for the zone that was effective Jan 1 of this year\n  // to Jan 1 of next year, and if any of the infos is DST, then\n  // this zone supports DST in the given year.\n\n  var index = this.bsearch(thisYear, this.transitionTimes);\n  if (index !== -1) {\n    while (index < this.transitionTimes.length && this.transitionTimes[index] < nextYear) {\n      if (this.ruleIndex[index++].isdst) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\n\n/**\n * Return the raw offset from UTC that this zone uses at the given time.\n *\n * @param {Date} date the Gregorian date to test\n * @returns {number} offset from from UTC in number of minutes. Negative\n * numbers are west of Greenwich, positive are east of Greenwich\n */\nZoneInfoFile.prototype.getRawOffset = function (date) {\n  var thisYear = date.getTime();\n  var nextYear = thisYear + 31536000000; // this is the number of ms in 1 Gregorian year\n\n  var index = this.bsearch(thisYear, this.transitionTimes);\n  var offset = this.defaultTime.offset;\n  if (index > -1) {\n    while (index < this.transitionTimes.length && this.ruleIndex[index].isdst && this.transitionTimes[index + 1] < nextYear) {\n      index++;\n    }\n    if (index < this.transitionTimes.length && !this.ruleIndex[index].isdst) {\n      offset = this.ruleIndex[index].offset;\n    }\n  }\n  return offset;\n};\n\n/**\n * If this zone uses DST in the given year, return the DST savings\n * in use. If the zone does not use DST in the given year, this\n * method will return 0.\n *\n * @param {Date} date the Gregorian date to test\n * @returns {number} number of minutes in DST savings if the zone\n * uses DST in the given year, or zero otherwise\n */\nZoneInfoFile.prototype.getDSTSavings = function (date) {\n  var thisYear = date.getTime();\n  var nextYear = thisYear + 31536000000; // this is the number of ms in 1 Gregorian year\n\n  // search for all transitions between now and one year\n  // from now, and calculate the difference in DST (if any)\n\n  var index = this.bsearch(thisYear, this.transitionTimes);\n  var savings = 0;\n  if (index > -1) {\n    while (index < this.transitionTimes.length && !this.ruleIndex[index].isdst && this.transitionTimes[index + 1] < nextYear) {\n      index++;\n    }\n    if (index < this.transitionTimes.length && this.ruleIndex[index].isdst) {\n      savings = this.ruleIndex[index].savings;\n    }\n  }\n  return savings;\n};\n\n/**\n * Return the start date/time of DST if this zone uses\n * DST in the given year.\n *\n * @param {Date} date the Gregorian date to test\n * @returns {number} unixtime representation of the start\n * of DST in the given year, or -1 if the zone does not\n * use DST in the given year\n */\nZoneInfoFile.prototype.getDSTStartDate = function (date) {\n  var year = date.getFullYear();\n  var thisYear = new Date(year, 0, 1).getTime();\n  var nextYear = new Date(year + 1, 0, 1).getTime();\n\n  // search for all transitions between Jan 1 of this year\n  // to Jan 1 of next year, and calculate the difference\n  // in DST (if any)\n\n  var index = this.bsearch(thisYear, this.transitionTimes);\n  var startDate = -1;\n  if (index > -1) {\n    if (this.transitionTimes[index] < thisYear) {\n      index++; // start in this year instead of the previous year\n    }\n\n    while (index < this.transitionTimes.length && !this.ruleIndex[index].isdst && this.transitionTimes[index + 1] < nextYear) {\n      index++;\n    }\n    if (index < this.transitionTimes.length && this.ruleIndex[index].isdst) {\n      startDate = this.transitionTimes[index];\n    }\n  }\n  return startDate;\n};\n\n/**\n * Return the end date/time of DST if this zone uses\n * DST in the given year.\n *\n * @param {Date} date the Gregorian date to test\n * @returns {number} unixtime representation of the end\n * of DST in the given year, or -1 if the zone does not\n * use DST in the given year\n */\nZoneInfoFile.prototype.getDSTEndDate = function (date) {\n  var year = date.getFullYear();\n  var thisYear = new Date(year, 0, 1).getTime();\n  var nextYear = new Date(year + 1, 0, 1).getTime();\n\n  // search for all transitions between Jan 1 of this year\n  // to Jan 1 of next year, and calculate the difference\n  // in DST (if any)\n\n  var index = this.bsearch(thisYear, this.transitionTimes);\n  var endDate = -1;\n  if (index > -1) {\n    if (this.transitionTimes[index] < thisYear) {\n      index++; // start in this year instead of the previous year\n    }\n\n    while (index < this.transitionTimes.length && this.ruleIndex[index].isdst && this.transitionTimes[index + 1] < nextYear) {\n      index++;\n    }\n    if (index < this.transitionTimes.length && !this.ruleIndex[index].isdst) {\n      endDate = this.transitionTimes[index];\n    }\n  }\n  return endDate;\n};\n\n/**\n * Return the abbreviation used by this zone in standard\n * time.\n *\n * @param {Date} date the Gregorian date to test\n * @returns {string} a string representing the abbreviation\n * used in this time zone during standard time\n */\nZoneInfoFile.prototype.getAbbreviation = function (date) {\n  var thisYear = date.getTime();\n  var nextYear = thisYear + 31536000000; // this is the number of ms in 1 Gregorian year\n\n  // search for all transitions between now and one year from now, and calculate the difference\n  // in DST (if any)\n  var abbr;\n  if (this.transitionTimes.length > 0) {\n    var index = this.bsearch(thisYear, this.transitionTimes);\n    abbr = this.ruleIndex[index].abbreviation;\n    if (index > -1) {\n      while (index < this.transitionTimes.length && this.ruleIndex[index].isdst && this.transitionTimes[index + 1] < nextYear) {\n        index++;\n      }\n      if (index < this.transitionTimes.length && !this.ruleIndex[index].isdst) {\n        abbr = this.ruleIndex[index].abbreviation;\n      }\n    }\n  } else {\n    abbr = this.standardTime.abbreviation;\n  }\n  return abbr;\n};\n\n/**\n * Return the abbreviation used by this zone in daylight\n * time. If the zone does not use DST in the given year,\n * this returns the same thing as getAbbreviation().\n *\n * @param {Date} date the Gregorian date to test\n * @returns {string} a string representing the abbreviation\n * used in this time zone during daylight time\n */\nZoneInfoFile.prototype.getDSTAbbreviation = function (date) {\n  var thisYear = date.getTime();\n  var nextYear = thisYear + 31536000000; // this is the number of ms in 1 Gregorian year\n\n  // search for all transitions between now and one year from now, and calculate the difference\n  // in DST (if any)\n\n  var abbr;\n  if (this.transitionTimes.length > 0) {\n    var index = this.bsearch(thisYear, this.transitionTimes);\n    abbr = this.ruleIndex[index].abbreviation;\n    if (index > -1) {\n      while (index < this.transitionTimes.length && !this.ruleIndex[index].isdst && this.transitionTimes[index + 1] < nextYear) {\n        index++;\n      }\n      if (index < this.transitionTimes.length && this.ruleIndex[index].isdst) {\n        abbr = this.ruleIndex[index].abbreviation;\n      }\n    }\n  } else {\n    abbr = this.standardTime.abbreviation;\n  }\n  return abbr;\n};\n\n/**\n * Return the zone information for the given date in ilib\n * format.\n *\n * @param {Date} date the Gregorian date to test\n * @returns {Object} an object containing the zone information\n * for the given date in the format that ilib can use directly\n */\nZoneInfoFile.prototype.getIlibZoneInfo = function (date) {\n  function minutesToStr(min) {\n    var hours = Math.floor(min / 60);\n    var minutes = min - hours * 60;\n    return hours + ':' + minutes;\n  }\n  function unixtimeToJD(millis) {\n    return 2440587.5 + millis / 86400000;\n  }\n  var res = {\n    'o': minutesToStr(this.getRawOffset(date))\n  };\n  if (this.usesDST(date)) {\n    res.f = '{c}';\n    res.e = {\n      'c': this.getAbbreviation(date),\n      'j': unixtimeToJD(this.getDSTEndDate(date))\n    };\n    res.s = {\n      'c': this.getDSTAbbreviation(date),\n      'j': unixtimeToJD(this.getDSTStartDate(date)),\n      'v': minutesToStr(this.getDSTSavings(date))\n    };\n  } else {\n    res.f = this.getAbbreviation(date);\n  }\n  return res;\n};\nmodule.exports = ZoneInfoFile;","map":{"version":3,"names":["PackedBuffer","require","_platform","PalmSystem","ZoneInfoFile","path","that","req","XMLHttpRequest","open","overrideMimeType","onload","byteArray","Uint8Array","response","length","i","charCodeAt","_parseInfo","onerror","Error","send","prototype","buffer","packed","getString","skip","tzh_ttisgmtcnt","getLong","tzh_ttisstdcnt","tzh_leapcnt","tzh_timecnt","tzh_typecnt","tzh_charcnt","transitionTimes","getLongs","map","item","ruleIndex","getUnsignedBytes","zoneInfo","push","offset","Math","floor","isdst","getByte","abbreviationIndex","allAbbreviations","_i","abbreviation","substring","indexOf","_i2","savings","standardTime","j","tti","daylightTime","k","defaultTime","bsearch","target","arr","high","low","mid","value","usesDST","date","thisYear","getTime","nextYear","index","getRawOffset","getDSTSavings","getDSTStartDate","year","getFullYear","Date","startDate","getDSTEndDate","endDate","getAbbreviation","abbr","getDSTAbbreviation","getIlibZoneInfo","minutesToStr","min","hours","minutes","unixtimeToJD","millis","res","f","e","s","module","exports"],"sources":["/Users/gitchan/Projects/gitchan-yonsei/2024-enact-template/node_modules/@enact/i18n/src/zoneinfo.js"],"sourcesContent":["\"use strict\";\n\n/* eslint-env browser,es6 */\n/*\n * zoneinfo.js - represent a binary zone info file\n *\n * Copyright Â© 2014 LG Electronics, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * The portion of this code that parses the zone info file format is derived\n * from the code in the node-zoneinfo project by Gregory McWhirter licensed\n * under the MIT license:\n *\n * Copyright (c) 2013 Gregory McWhirter\n *\n * Permission is hereby granted, free of charge, to any person obtaining\n * a copy of this software and associated documentation files (the\n * \"Software\"), to deal in the Software without restriction, including\n * without limitation the rights to use, copy, modify, merge, publish,\n * distribute, sublicense, and/or sell copies of the Software, and to\n * permit persons to whom the Software is furnished to do so, subject\n * to the following conditions:\n\n * The above copyright notice and this permission notice shall be included\n * in all copies or substantial portions of the Software.\n\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL\n * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR\n * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\n * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\n * OTHER DEALINGS IN THE SOFTWARE.\n */\n\nvar PackedBuffer = require('./packedbuffer.js');\nvar _platform = typeof PalmSystem !== 'undefined' ? 'webos' : 'browser';\n\n/**\n * Represents a binary zone info file of the sort that the Unix Zone Info Compiler\n * produces.\n * @constructor\n * @param {string} path path to the file to be loaded\n * @param {number} year year of the zone info rules needed\n */\nvar ZoneInfoFile = function ZoneInfoFile(path) {\n  var that = this;\n  switch (_platform) {\n    /*\n    Uncomment and use this when enyo works for binary load.\n    case 'enyo':\n    \tlet ajax = new enyo.Ajax({\n    \t\txhrFields: {\n    \t\t\tresponseType:'arraybuffer'\n    \t\t},\n    \t\tcacheBust: false,\n    \t\tsync: true,\n    \t\thandleAs: 'binary',\n    \t\turl: 'file://' + path\n    \t});\n    \tajax.response(this, function (s, r) {\n    \t\tlet byteArray = new Uint8Array(r);\n    \t\t// console.log('ZoneInfoFile bytes received: ' + byteArray.length);\n    \t\tthat._parseInfo(byteArray);\n    \t});\n    \t//ajax.error(this, function (s, r) {\n    \t//\tconsole.log('ZoneInfoFile: failed to load files ' + JSON.stringify(s) + ' ' + r);\n    \t//});\n    \tajax.go();\n    \tbreak;\n    */\n\n    default:\n      {\n        // use normal web techniques for sync binary data fetching\n        // see https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/Sending_and_Receiving_Binary_Data\n        var req = new XMLHttpRequest();\n        req.open('GET', 'file:' + path, false);\n        req.overrideMimeType('text/plain; charset=x-user-defined');\n        req.onload = function () {\n          var byteArray = new Uint8Array(req.response.length);\n          for (var i = 0; i < req.response.length; i++) {\n            byteArray[i] = req.response.charCodeAt(i) & 0xff;\n          }\n          // console.log('ZoneInfoFile bytes received: ' + byteArray.length);\n          that._parseInfo(byteArray);\n        };\n        req.onerror = function () {\n          throw new Error('Cannot load file ' + path);\n        };\n        req.send();\n        break;\n      }\n  }\n};\n\n/**\n * @private\n * Parse the binary buffer to find the zone info\n * @param {Buffer} buffer The buffer to process\n * @returns {void}\n */\nZoneInfoFile.prototype._parseInfo = function (buffer) {\n  var packed = new PackedBuffer(buffer);\n\n  // The time zone information files used by tzset(3)\n  // begin with the magic characters 'TZif' to identify\n  // them as time zone information files, followed by\n  // sixteen bytes reserved for future use, followed by\n  // six four-byte values of type long, written in a\n  // ''standard'' byte order (the high-order byte\n  // of the value is written first).\n  if (packed.getString(4) !== 'TZif') {\n    throw new Error('file format not recognized');\n  } else {\n    // ignore 16 bytes\n    packed.skip(16);\n\n    /* eslint-disable camelcase */\n    // The number of UTC/local indicators stored in the file.\n    var tzh_ttisgmtcnt = packed.getLong();\n    // The number of standard/wall indicators stored in the file.\n    var tzh_ttisstdcnt = packed.getLong();\n    // The number of leap seconds for which data is stored in the file.\n    var tzh_leapcnt = packed.getLong();\n    // The number of 'transition times' for which data is stored in the file.\n    var tzh_timecnt = packed.getLong();\n    // The number of 'local time types' for which data is stored in the file (must not be zero).\n    var tzh_typecnt = packed.getLong();\n    // The number of characters of 'time zone abbreviation strings' stored in the file.\n    var tzh_charcnt = packed.getLong();\n    this.transitionTimes = tzh_timecnt ? packed.getLongs(tzh_timecnt) : [];\n    this.transitionTimes = this.transitionTimes.map(function (item) {\n      return item * 1000;\n    });\n\n    // these are indexes into the zonesInfo that correspond to each transition time\n    this.ruleIndex = tzh_timecnt ? packed.getUnsignedBytes(tzh_timecnt) : [];\n    this.zoneInfo = [];\n    for (var i = 0; i < tzh_typecnt; i++) {\n      this.zoneInfo.push({\n        offset: Math.floor(packed.getLong() / 60),\n        // offset in seconds, so convert to minutes\n        isdst: !!packed.getByte(),\n        abbreviationIndex: packed.getByte()\n      });\n    }\n    var allAbbreviations = packed.getString(tzh_charcnt);\n    for (var _i = 0; _i < tzh_typecnt; _i++) {\n      var abbreviation = allAbbreviations.substring(this.zoneInfo[_i].abbreviationIndex);\n      this.zoneInfo[_i].abbreviation = abbreviation.substring(0, abbreviation.indexOf('\\x00'));\n    }\n\n    // ignore the leap seconds\n    if (tzh_leapcnt) {\n      packed.skip(tzh_leapcnt * 2);\n    }\n\n    // skip the standard/wall time indicators\n    if (tzh_ttisstdcnt) {\n      packed.skip(tzh_ttisstdcnt);\n    }\n\n    // ignore the UTC/local time indicators -- everything should be UTC\n    if (tzh_ttisgmtcnt) {\n      packed.skip(tzh_ttisgmtcnt);\n    }\n\n    // finished reading\n\n    // Replace ttinfo indexes for ttinfo objects.\n    var that = this;\n    this.ruleIndex = this.ruleIndex.map(function (item) {\n      return {\n        offset: that.zoneInfo[item].offset,\n        isdst: that.zoneInfo[item].isdst,\n        abbreviation: that.zoneInfo[item].abbreviation\n      };\n    });\n\n    // calculate the dst savings for each daylight time\n    for (var _i2 = 0; _i2 < tzh_timecnt; _i2++) {\n      if (_i2 > 0 && this.ruleIndex[_i2].isdst) {\n        this.ruleIndex[_i2].savings = this.ruleIndex[_i2].offset - this.ruleIndex[_i2 - 1].offset;\n      }\n    }\n\n    // Set standard, dst, and before ttinfos. before will be\n    // used when a given time is before any transitions,\n    // and will be set to the first non-dst ttinfo, or to\n    // the first dst, if all of them are dst.\n    if (!this.transitionTimes.length) {\n      this.standardTime = this.zoneInfo[0];\n    } else {\n      for (var j = tzh_timecnt - 1; j > -1; j--) {\n        var tti = this.ruleIndex[j];\n        if (!this.standardTime && !tti.isdst) {\n          this.standardTime = tti;\n        } else if (!this.daylightTime && tti.isdst) {\n          this.daylightTime = tti;\n        }\n        if (this.daylightTime && this.standardTime) {\n          break;\n        }\n      }\n      if (this.daylightTime && !this.standardTime) {\n        this.standardTime = this.daylightTime;\n      }\n      for (var k = this.zoneInfo.length - 1; k > 0; k--) {\n        if (!this.zoneInfo[k].isdst) {\n          this.defaultTime = this.zoneInfo[k];\n          break;\n        }\n      }\n    }\n    if (!this.defaultTime) {\n      this.defaultTime = this.zoneInfo[this.zoneInfo.length - 1];\n    }\n  }\n};\n\n/**\n * Binary search a sorted array of numbers for a particular target value.\n * If the exact value is not found, it returns the index of the largest\n * entry that is smaller than the given target value.<p>\n *\n * @param {number} target element being sought\n * @param {Array} arr the array being searched\n * @returns {number} the index of the array into which the value would fit if\n * inserted, or -1 if given array is not an array or the target is not\n * a number\n */\nZoneInfoFile.prototype.bsearch = function (target, arr) {\n  if (typeof arr === 'undefined' || !arr || typeof target === 'undefined' || target < arr[0]) {\n    return -1;\n  }\n\n  // greater than the end of the array\n  if (target > arr[arr.length - 1]) {\n    return arr.length - 1;\n  }\n  var high = arr.length - 1,\n    low = 0,\n    mid = 0,\n    value;\n  while (low <= high) {\n    mid = Math.floor((high + low) / 2);\n    value = arr[mid] - target;\n    if (value > 0) {\n      high = mid - 1;\n    } else if (value < 0) {\n      low = mid + 1;\n    } else {\n      return mid;\n    }\n  }\n  return high;\n};\n\n/**\n * Return whether or not this zone uses DST in the given year.\n *\n * @param {Date} date the Gregorian date to test\n * @returns {boolean} true if the zone uses DST in the given year\n */\nZoneInfoFile.prototype.usesDST = function (date) {\n  var thisYear = date.getTime();\n  var nextYear = thisYear + 31536000000; // this is the number of ms in 1 Gregorian year\n\n  // search for the zone that was effective Jan 1 of this year\n  // to Jan 1 of next year, and if any of the infos is DST, then\n  // this zone supports DST in the given year.\n\n  var index = this.bsearch(thisYear, this.transitionTimes);\n  if (index !== -1) {\n    while (index < this.transitionTimes.length && this.transitionTimes[index] < nextYear) {\n      if (this.ruleIndex[index++].isdst) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\n\n/**\n * Return the raw offset from UTC that this zone uses at the given time.\n *\n * @param {Date} date the Gregorian date to test\n * @returns {number} offset from from UTC in number of minutes. Negative\n * numbers are west of Greenwich, positive are east of Greenwich\n */\nZoneInfoFile.prototype.getRawOffset = function (date) {\n  var thisYear = date.getTime();\n  var nextYear = thisYear + 31536000000; // this is the number of ms in 1 Gregorian year\n\n  var index = this.bsearch(thisYear, this.transitionTimes);\n  var offset = this.defaultTime.offset;\n  if (index > -1) {\n    while (index < this.transitionTimes.length && this.ruleIndex[index].isdst && this.transitionTimes[index + 1] < nextYear) {\n      index++;\n    }\n    if (index < this.transitionTimes.length && !this.ruleIndex[index].isdst) {\n      offset = this.ruleIndex[index].offset;\n    }\n  }\n  return offset;\n};\n\n/**\n * If this zone uses DST in the given year, return the DST savings\n * in use. If the zone does not use DST in the given year, this\n * method will return 0.\n *\n * @param {Date} date the Gregorian date to test\n * @returns {number} number of minutes in DST savings if the zone\n * uses DST in the given year, or zero otherwise\n */\nZoneInfoFile.prototype.getDSTSavings = function (date) {\n  var thisYear = date.getTime();\n  var nextYear = thisYear + 31536000000; // this is the number of ms in 1 Gregorian year\n\n  // search for all transitions between now and one year\n  // from now, and calculate the difference in DST (if any)\n\n  var index = this.bsearch(thisYear, this.transitionTimes);\n  var savings = 0;\n  if (index > -1) {\n    while (index < this.transitionTimes.length && !this.ruleIndex[index].isdst && this.transitionTimes[index + 1] < nextYear) {\n      index++;\n    }\n    if (index < this.transitionTimes.length && this.ruleIndex[index].isdst) {\n      savings = this.ruleIndex[index].savings;\n    }\n  }\n  return savings;\n};\n\n/**\n * Return the start date/time of DST if this zone uses\n * DST in the given year.\n *\n * @param {Date} date the Gregorian date to test\n * @returns {number} unixtime representation of the start\n * of DST in the given year, or -1 if the zone does not\n * use DST in the given year\n */\nZoneInfoFile.prototype.getDSTStartDate = function (date) {\n  var year = date.getFullYear();\n  var thisYear = new Date(year, 0, 1).getTime();\n  var nextYear = new Date(year + 1, 0, 1).getTime();\n\n  // search for all transitions between Jan 1 of this year\n  // to Jan 1 of next year, and calculate the difference\n  // in DST (if any)\n\n  var index = this.bsearch(thisYear, this.transitionTimes);\n  var startDate = -1;\n  if (index > -1) {\n    if (this.transitionTimes[index] < thisYear) {\n      index++; // start in this year instead of the previous year\n    }\n\n    while (index < this.transitionTimes.length && !this.ruleIndex[index].isdst && this.transitionTimes[index + 1] < nextYear) {\n      index++;\n    }\n    if (index < this.transitionTimes.length && this.ruleIndex[index].isdst) {\n      startDate = this.transitionTimes[index];\n    }\n  }\n  return startDate;\n};\n\n/**\n * Return the end date/time of DST if this zone uses\n * DST in the given year.\n *\n * @param {Date} date the Gregorian date to test\n * @returns {number} unixtime representation of the end\n * of DST in the given year, or -1 if the zone does not\n * use DST in the given year\n */\nZoneInfoFile.prototype.getDSTEndDate = function (date) {\n  var year = date.getFullYear();\n  var thisYear = new Date(year, 0, 1).getTime();\n  var nextYear = new Date(year + 1, 0, 1).getTime();\n\n  // search for all transitions between Jan 1 of this year\n  // to Jan 1 of next year, and calculate the difference\n  // in DST (if any)\n\n  var index = this.bsearch(thisYear, this.transitionTimes);\n  var endDate = -1;\n  if (index > -1) {\n    if (this.transitionTimes[index] < thisYear) {\n      index++; // start in this year instead of the previous year\n    }\n\n    while (index < this.transitionTimes.length && this.ruleIndex[index].isdst && this.transitionTimes[index + 1] < nextYear) {\n      index++;\n    }\n    if (index < this.transitionTimes.length && !this.ruleIndex[index].isdst) {\n      endDate = this.transitionTimes[index];\n    }\n  }\n  return endDate;\n};\n\n/**\n * Return the abbreviation used by this zone in standard\n * time.\n *\n * @param {Date} date the Gregorian date to test\n * @returns {string} a string representing the abbreviation\n * used in this time zone during standard time\n */\nZoneInfoFile.prototype.getAbbreviation = function (date) {\n  var thisYear = date.getTime();\n  var nextYear = thisYear + 31536000000; // this is the number of ms in 1 Gregorian year\n\n  // search for all transitions between now and one year from now, and calculate the difference\n  // in DST (if any)\n  var abbr;\n  if (this.transitionTimes.length > 0) {\n    var index = this.bsearch(thisYear, this.transitionTimes);\n    abbr = this.ruleIndex[index].abbreviation;\n    if (index > -1) {\n      while (index < this.transitionTimes.length && this.ruleIndex[index].isdst && this.transitionTimes[index + 1] < nextYear) {\n        index++;\n      }\n      if (index < this.transitionTimes.length && !this.ruleIndex[index].isdst) {\n        abbr = this.ruleIndex[index].abbreviation;\n      }\n    }\n  } else {\n    abbr = this.standardTime.abbreviation;\n  }\n  return abbr;\n};\n\n/**\n * Return the abbreviation used by this zone in daylight\n * time. If the zone does not use DST in the given year,\n * this returns the same thing as getAbbreviation().\n *\n * @param {Date} date the Gregorian date to test\n * @returns {string} a string representing the abbreviation\n * used in this time zone during daylight time\n */\nZoneInfoFile.prototype.getDSTAbbreviation = function (date) {\n  var thisYear = date.getTime();\n  var nextYear = thisYear + 31536000000; // this is the number of ms in 1 Gregorian year\n\n  // search for all transitions between now and one year from now, and calculate the difference\n  // in DST (if any)\n\n  var abbr;\n  if (this.transitionTimes.length > 0) {\n    var index = this.bsearch(thisYear, this.transitionTimes);\n    abbr = this.ruleIndex[index].abbreviation;\n    if (index > -1) {\n      while (index < this.transitionTimes.length && !this.ruleIndex[index].isdst && this.transitionTimes[index + 1] < nextYear) {\n        index++;\n      }\n      if (index < this.transitionTimes.length && this.ruleIndex[index].isdst) {\n        abbr = this.ruleIndex[index].abbreviation;\n      }\n    }\n  } else {\n    abbr = this.standardTime.abbreviation;\n  }\n  return abbr;\n};\n\n/**\n * Return the zone information for the given date in ilib\n * format.\n *\n * @param {Date} date the Gregorian date to test\n * @returns {Object} an object containing the zone information\n * for the given date in the format that ilib can use directly\n */\nZoneInfoFile.prototype.getIlibZoneInfo = function (date) {\n  function minutesToStr(min) {\n    var hours = Math.floor(min / 60);\n    var minutes = min - hours * 60;\n    return hours + ':' + minutes;\n  }\n  function unixtimeToJD(millis) {\n    return 2440587.5 + millis / 86400000;\n  }\n  var res = {\n    'o': minutesToStr(this.getRawOffset(date))\n  };\n  if (this.usesDST(date)) {\n    res.f = '{c}';\n    res.e = {\n      'c': this.getAbbreviation(date),\n      'j': unixtimeToJD(this.getDSTEndDate(date))\n    };\n    res.s = {\n      'c': this.getDSTAbbreviation(date),\n      'j': unixtimeToJD(this.getDSTStartDate(date)),\n      'v': minutesToStr(this.getDSTSavings(date))\n    };\n  } else {\n    res.f = this.getAbbreviation(date);\n  }\n  return res;\n};\nmodule.exports = ZoneInfoFile;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}