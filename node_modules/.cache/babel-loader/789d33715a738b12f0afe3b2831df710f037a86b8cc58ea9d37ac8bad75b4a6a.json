{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.warning = exports.perfLog = exports.notice = exports.info = exports.error = exports.emergency = exports.debug = exports.critical = exports.alert = void 0;\n/* eslint-disable no-console */\n/**\n * Provides a wrapper around PmLogLib logging API\n *\n * @module webos/pmloglib\n * @exports emergency\n * @exports alert\n * @exports critical\n * @exports error\n * @exports warning\n * @exports notice\n * @exports info\n * @exports debug\n * @exports perfLog\n */\n\n// Log level constants\nvar levelEmergency = 0;\nvar levelAlert = 1;\nvar levelCritical = 2;\nvar levelError = 3;\nvar levelWarning = 4;\nvar levelNotice = 5;\nvar levelInfo = 6;\nvar levelDebug = 7;\nvar isObject = function isObject(obj) {\n  return !!obj && typeof obj === 'object' && Object.prototype.toString.call(obj) !== '[object Array]';\n};\n\n// Log function stringifies and escapes keyVals, and passes to PmLogString\nvar log = function log(level, messageId, keyVals, freeText) {\n  if (typeof window !== 'undefined' && window.PalmSystem) {\n    if (keyVals && !isObject(keyVals)) {\n      level = levelError;\n      keyVals = {\n        msgid: messageId\n      };\n      messageId = 'MISMATCHED_FMT';\n      freeText = null;\n      console.warn('webOSLog called with invalid format: keyVals must be an object');\n    }\n    if (!messageId && level !== levelDebug) {\n      console.warn('webOSLog called with invalid format: messageId was empty');\n    }\n    if (keyVals) {\n      keyVals = JSON.stringify(keyVals);\n    }\n    if (window.PalmSystem.PmLogString) {\n      if (level === levelDebug) {\n        // debug only accepts 2 arguments\n        window.PalmSystem.PmLogString(level, null, null, freeText);\n      } else {\n        window.PalmSystem.PmLogString(level, messageId, keyVals, freeText);\n      }\n    } else {\n      console.error('Unable to send log: PmLogString not found in this version of PalmSystem');\n    }\n  }\n};\n\n/**\n * Logs with PmLogLib at the \"emergency\" level.\n *\n * @function\n * @param {String} messageId Short string that uniquely identifies the log message within a component\n * @param {Object} keyVals Key-value pairs to log\n * @param {String} freeText Text string to log\n * @returns {undefined}\n * @memberof webos/pmloglib\n * @public\n */\nvar emergency = function emergency(messageId, keyVals, freeText) {\n  log(levelEmergency, messageId, keyVals, freeText);\n};\n\n/**\n * Logs with PmLogLib at the \"alert\" level.\n *\n * @function\n * @param {String} messageId Short string that uniquely identifies the log message within a component\n * @param {Object} keyVals Key-value pairs to log\n * @param {String} freeText Text string to log\n * @returns {undefined}\n * @memberof webos/pmloglib\n * @public\n */\nexports.emergency = emergency;\nvar alert = function alert(messageId, keyVals, freeText) {\n  log(levelAlert, messageId, keyVals, freeText);\n};\n\n/**\n * Logs with PmLogLib at the \"critical\" level.\n *\n * @function\n * @param {String} messageId Short string that uniquely identifies the log message within a component\n * @param {Object} keyVals Key-value pairs to log\n * @param {String} freeText Text string to log\n * @returns {undefined}\n * @memberof webos/pmloglib\n * @public\n */\nexports.alert = alert;\nvar critical = function critical(messageId, keyVals, freeText) {\n  log(levelCritical, messageId, keyVals, freeText);\n};\n\n/**\n * Logs with PmLogLib at the \"error\" level.\n *\n * @function\n * @param {String} messageId Short string that uniquely identifies the log message within a component\n * @param {Object} keyVals Key-value pairs to log\n * @param {String} freeText Text string to log\n * @returns {undefined}\n * @memberof webos/pmloglib\n * @public\n */\nexports.critical = critical;\nvar error = function error(messageId, keyVals, freeText) {\n  log(levelError, messageId, keyVals, freeText);\n};\n\n/**\n * Logs with PmLogLib at the \"warning\" level.\n *\n * @function\n * @param {String} messageId Short string that uniquely identifies the log message within a component\n * @param {Object} keyVals Key-value pairs to log\n * @param {String} freeText Text string to log\n * @returns {undefined}\n * @memberof webos/pmloglib\n * @public\n */\nexports.error = error;\nvar warning = function warning(messageId, keyVals, freeText) {\n  log(levelWarning, messageId, keyVals, freeText);\n};\n\n/**\n * Logs with PmLogLib at the \"notice\" level.\n *\n * @function\n * @param {String} messageId Short string that uniquely identifies the log message within a component\n * @param {Object} keyVals Key-value pairs to log\n * @param {String} freeText Text string to log\n * @returns {undefined}\n * @memberof webos/pmloglib\n * @public\n */\nexports.warning = warning;\nvar notice = function notice(messageId, keyVals, freeText) {\n  log(levelNotice, messageId, keyVals, freeText);\n};\n\n/**\n * Logs with PmLogLib at the \"info\" level.\n *\n * @function\n * @param {String} messageId Short string that uniquely identifies the log message within a component\n * @param {Object} keyVals Key-value pairs to log\n * @param {String} freeText Text string to log\n * @returns {undefined}\n * @memberof webos/pmloglib\n * @public\n */\nexports.notice = notice;\nvar info = function info(messageId, keyVals, freeText) {\n  log(levelInfo, messageId, keyVals, freeText);\n};\n\n/**\n * Logs with PmLogLib at the \"debug\" level.\n *\n * @function\n * @param {String} freeText Text string to log\n * @returns {undefined}\n * @memberof webos/pmloglib\n * @public\n */\nexports.info = info;\nvar debug = function debug(freeText) {\n  log(levelDebug, '', '', freeText);\n};\n\n/**\n * Places a time-stamped performance log entry into the system log using the `PmLogInfoWithClock()`\n * method.\n *\n * @function\n * @param {String} messageId Short string that uniquely identifies the log message within a component.\n * @param {String} perfType A string that identifies the type of perf message\n * @param {String} perfGroup A string that identifies the group of the perf message\n * @returns {undefined}\n * @memberof webos/pmloglib\n * @public\n */\nexports.debug = debug;\nvar perfLog = function perfLog(messageId, perfType, perfGroup) {\n  if (typeof window !== 'undefined' && window.PalmSystem) {\n    if (!messageId) {\n      console.warn('PmLogInfoWithClock called with invalid format: messageId was empty');\n    }\n    if (window.PalmSystem.PmLogInfoWithClock) {\n      window.PalmSystem.PmLogInfoWithClock(messageId, perfType ? perfType : '', perfGroup ? perfGroup : '');\n    } else {\n      console.error('Unable to send log: PmLogInfoWithClock not found in this version of PalmSystem');\n    }\n  }\n};\nexports.perfLog = perfLog;","map":{"version":3,"names":["Object","defineProperty","exports","value","warning","perfLog","notice","info","error","emergency","debug","critical","alert","levelEmergency","levelAlert","levelCritical","levelError","levelWarning","levelNotice","levelInfo","levelDebug","isObject","obj","prototype","toString","call","log","level","messageId","keyVals","freeText","window","PalmSystem","msgid","console","warn","JSON","stringify","PmLogString","perfType","perfGroup","PmLogInfoWithClock"],"sources":["/Users/gitchan/Projects/gitchan-yonsei/2024-enact-template/node_modules/@enact/webos/pmloglib/pmloglib.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.warning = exports.perfLog = exports.notice = exports.info = exports.error = exports.emergency = exports.debug = exports.critical = exports.alert = void 0;\n/* eslint-disable no-console */\n/**\n * Provides a wrapper around PmLogLib logging API\n *\n * @module webos/pmloglib\n * @exports emergency\n * @exports alert\n * @exports critical\n * @exports error\n * @exports warning\n * @exports notice\n * @exports info\n * @exports debug\n * @exports perfLog\n */\n\n// Log level constants\nvar levelEmergency = 0;\nvar levelAlert = 1;\nvar levelCritical = 2;\nvar levelError = 3;\nvar levelWarning = 4;\nvar levelNotice = 5;\nvar levelInfo = 6;\nvar levelDebug = 7;\nvar isObject = function isObject(obj) {\n  return !!obj && typeof obj === 'object' && Object.prototype.toString.call(obj) !== '[object Array]';\n};\n\n// Log function stringifies and escapes keyVals, and passes to PmLogString\nvar log = function log(level, messageId, keyVals, freeText) {\n  if (typeof window !== 'undefined' && window.PalmSystem) {\n    if (keyVals && !isObject(keyVals)) {\n      level = levelError;\n      keyVals = {\n        msgid: messageId\n      };\n      messageId = 'MISMATCHED_FMT';\n      freeText = null;\n      console.warn('webOSLog called with invalid format: keyVals must be an object');\n    }\n    if (!messageId && level !== levelDebug) {\n      console.warn('webOSLog called with invalid format: messageId was empty');\n    }\n    if (keyVals) {\n      keyVals = JSON.stringify(keyVals);\n    }\n    if (window.PalmSystem.PmLogString) {\n      if (level === levelDebug) {\n        // debug only accepts 2 arguments\n        window.PalmSystem.PmLogString(level, null, null, freeText);\n      } else {\n        window.PalmSystem.PmLogString(level, messageId, keyVals, freeText);\n      }\n    } else {\n      console.error('Unable to send log: PmLogString not found in this version of PalmSystem');\n    }\n  }\n};\n\n/**\n * Logs with PmLogLib at the \"emergency\" level.\n *\n * @function\n * @param {String} messageId Short string that uniquely identifies the log message within a component\n * @param {Object} keyVals Key-value pairs to log\n * @param {String} freeText Text string to log\n * @returns {undefined}\n * @memberof webos/pmloglib\n * @public\n */\nvar emergency = function emergency(messageId, keyVals, freeText) {\n  log(levelEmergency, messageId, keyVals, freeText);\n};\n\n/**\n * Logs with PmLogLib at the \"alert\" level.\n *\n * @function\n * @param {String} messageId Short string that uniquely identifies the log message within a component\n * @param {Object} keyVals Key-value pairs to log\n * @param {String} freeText Text string to log\n * @returns {undefined}\n * @memberof webos/pmloglib\n * @public\n */\nexports.emergency = emergency;\nvar alert = function alert(messageId, keyVals, freeText) {\n  log(levelAlert, messageId, keyVals, freeText);\n};\n\n/**\n * Logs with PmLogLib at the \"critical\" level.\n *\n * @function\n * @param {String} messageId Short string that uniquely identifies the log message within a component\n * @param {Object} keyVals Key-value pairs to log\n * @param {String} freeText Text string to log\n * @returns {undefined}\n * @memberof webos/pmloglib\n * @public\n */\nexports.alert = alert;\nvar critical = function critical(messageId, keyVals, freeText) {\n  log(levelCritical, messageId, keyVals, freeText);\n};\n\n/**\n * Logs with PmLogLib at the \"error\" level.\n *\n * @function\n * @param {String} messageId Short string that uniquely identifies the log message within a component\n * @param {Object} keyVals Key-value pairs to log\n * @param {String} freeText Text string to log\n * @returns {undefined}\n * @memberof webos/pmloglib\n * @public\n */\nexports.critical = critical;\nvar error = function error(messageId, keyVals, freeText) {\n  log(levelError, messageId, keyVals, freeText);\n};\n\n/**\n * Logs with PmLogLib at the \"warning\" level.\n *\n * @function\n * @param {String} messageId Short string that uniquely identifies the log message within a component\n * @param {Object} keyVals Key-value pairs to log\n * @param {String} freeText Text string to log\n * @returns {undefined}\n * @memberof webos/pmloglib\n * @public\n */\nexports.error = error;\nvar warning = function warning(messageId, keyVals, freeText) {\n  log(levelWarning, messageId, keyVals, freeText);\n};\n\n/**\n * Logs with PmLogLib at the \"notice\" level.\n *\n * @function\n * @param {String} messageId Short string that uniquely identifies the log message within a component\n * @param {Object} keyVals Key-value pairs to log\n * @param {String} freeText Text string to log\n * @returns {undefined}\n * @memberof webos/pmloglib\n * @public\n */\nexports.warning = warning;\nvar notice = function notice(messageId, keyVals, freeText) {\n  log(levelNotice, messageId, keyVals, freeText);\n};\n\n/**\n * Logs with PmLogLib at the \"info\" level.\n *\n * @function\n * @param {String} messageId Short string that uniquely identifies the log message within a component\n * @param {Object} keyVals Key-value pairs to log\n * @param {String} freeText Text string to log\n * @returns {undefined}\n * @memberof webos/pmloglib\n * @public\n */\nexports.notice = notice;\nvar info = function info(messageId, keyVals, freeText) {\n  log(levelInfo, messageId, keyVals, freeText);\n};\n\n/**\n * Logs with PmLogLib at the \"debug\" level.\n *\n * @function\n * @param {String} freeText Text string to log\n * @returns {undefined}\n * @memberof webos/pmloglib\n * @public\n */\nexports.info = info;\nvar debug = function debug(freeText) {\n  log(levelDebug, '', '', freeText);\n};\n\n/**\n * Places a time-stamped performance log entry into the system log using the `PmLogInfoWithClock()`\n * method.\n *\n * @function\n * @param {String} messageId Short string that uniquely identifies the log message within a component.\n * @param {String} perfType A string that identifies the type of perf message\n * @param {String} perfGroup A string that identifies the group of the perf message\n * @returns {undefined}\n * @memberof webos/pmloglib\n * @public\n */\nexports.debug = debug;\nvar perfLog = function perfLog(messageId, perfType, perfGroup) {\n  if (typeof window !== 'undefined' && window.PalmSystem) {\n    if (!messageId) {\n      console.warn('PmLogInfoWithClock called with invalid format: messageId was empty');\n    }\n    if (window.PalmSystem.PmLogInfoWithClock) {\n      window.PalmSystem.PmLogInfoWithClock(messageId, perfType ? perfType : '', perfGroup ? perfGroup : '');\n    } else {\n      console.error('Unable to send log: PmLogInfoWithClock not found in this version of PalmSystem');\n    }\n  }\n};\nexports.perfLog = perfLog;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}