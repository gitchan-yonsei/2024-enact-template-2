{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.toCapitalized = exports.isRtlText = void 0;\nObject.defineProperty(exports, \"toLowerCase\", {\n  enumerable: true,\n  get: function get() {\n    return _case.toLowerCase;\n  }\n});\nObject.defineProperty(exports, \"toUpperCase\", {\n  enumerable: true,\n  get: function get() {\n    return _case.toUpperCase;\n  }\n});\nexports.toWordCase = void 0;\nrequire(\"../src/glue\");\nvar _case = require(\"../src/case\");\n/**\n * A collection of locale-aware text utility function.\n *\n * @module i18n/util\n * @exports isRtlText\n * @exports toCapitalized\n * @exports toLowerCase\n * @exports toUpperCase\n * @exports toWordCase\n */\n\n/*\n * This regex pattern is used by the {@link i18n/utils.isRtlText|isRtlText()} function.\n *\n * Arabic: \\u0600-\\u06FF\\u0750-\\u077F\\u08A0-\\u08FF\\uFB50-\\uFDFF\\uFE70-\\uFEFE\n * Hebrew: \\u0590-\\u05FF\\uFB1D-\\uFB4F\n *\n * @private\n */\nvar rtlPattern = /[\\u0600-\\u06FF\\u0750-\\u077F\\u08A0-\\u08FF\\uFB50-\\uFDFF\\uFE70-\\uFEFE\\u0590-\\u05FF\\uFB1D-\\uFB4F]/;\n\n/**\n * Takes content `str` and determines whether or not it is {@link /docs/developer-guide/glossary/#rtl|RTL}.\n *\n * @function\n * @memberof i18n/util\n * @param {String} str - A string to check the {@link /docs/developer-guide/glossary/#rtl|RTL}-ness of.\n * @returns {Boolean} `true` if `str` should be RTL; `false` if not.\n * @public\n */\nvar isRtlText = function isRtlText(str) {\n  if (typeof str === 'string') {\n    return rtlPattern.test(str);\n  }\n  return false;\n};\n\n/**\n * Capitalizes the first letter of a given string (locale aware).\n *\n * @function\n * @memberof i18n/util\n * @param {String} str - The string to capitalize.\n * @returns {String} The capitalized string.\n * @public\n */\nexports.isRtlText = isRtlText;\nvar toCapitalized = function toCapitalized(str) {\n  return (0, _case.toUpperCase)(str.slice(0, 1)) + str.slice(1);\n};\n\n/**\n * Capitalizes every word in a string. Words are separated by spaces, not necessarily\n * word-breaks (locale aware).\n *\n * @function\n * @memberof i18n/util\n * @param {String} str - The string to capitalize.\n * @returns {String} The word-cased string.\n * @public\n */\nexports.toCapitalized = toCapitalized;\nvar toWordCase = function toWordCase(str) {\n  return str.split(' ').map(toCapitalized).join(' ');\n};\n\n/**\n * Locale-safely convert a string to lower case.\n *\n * @name toLowerCase\n * @function\n * @memberof i18n/util\n * @param {String} inString String to convert to lower case\n * @returns {String} Lower-cased string\n * @public\n */\n\n/**\n * Locale-safely convert a string to upper case.\n *\n * @name toUpperCase\n * @function\n * @memberof i18n/util\n * @param {String} inString String to convert to upper case\n * @returns {String} Upper-cased string\n * @public\n */\nexports.toWordCase = toWordCase;","map":{"version":3,"names":["Object","defineProperty","exports","value","toCapitalized","isRtlText","enumerable","get","_case","toLowerCase","toUpperCase","toWordCase","require","rtlPattern","str","test","slice","split","map","join"],"sources":["/Users/gitchan/Projects/gitchan-yonsei/2024-enact-template/node_modules/@enact/i18n/util/util.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.toCapitalized = exports.isRtlText = void 0;\nObject.defineProperty(exports, \"toLowerCase\", {\n  enumerable: true,\n  get: function get() {\n    return _case.toLowerCase;\n  }\n});\nObject.defineProperty(exports, \"toUpperCase\", {\n  enumerable: true,\n  get: function get() {\n    return _case.toUpperCase;\n  }\n});\nexports.toWordCase = void 0;\nrequire(\"../src/glue\");\nvar _case = require(\"../src/case\");\n/**\n * A collection of locale-aware text utility function.\n *\n * @module i18n/util\n * @exports isRtlText\n * @exports toCapitalized\n * @exports toLowerCase\n * @exports toUpperCase\n * @exports toWordCase\n */\n\n/*\n * This regex pattern is used by the {@link i18n/utils.isRtlText|isRtlText()} function.\n *\n * Arabic: \\u0600-\\u06FF\\u0750-\\u077F\\u08A0-\\u08FF\\uFB50-\\uFDFF\\uFE70-\\uFEFE\n * Hebrew: \\u0590-\\u05FF\\uFB1D-\\uFB4F\n *\n * @private\n */\nvar rtlPattern = /[\\u0600-\\u06FF\\u0750-\\u077F\\u08A0-\\u08FF\\uFB50-\\uFDFF\\uFE70-\\uFEFE\\u0590-\\u05FF\\uFB1D-\\uFB4F]/;\n\n/**\n * Takes content `str` and determines whether or not it is {@link /docs/developer-guide/glossary/#rtl|RTL}.\n *\n * @function\n * @memberof i18n/util\n * @param {String} str - A string to check the {@link /docs/developer-guide/glossary/#rtl|RTL}-ness of.\n * @returns {Boolean} `true` if `str` should be RTL; `false` if not.\n * @public\n */\nvar isRtlText = function isRtlText(str) {\n  if (typeof str === 'string') {\n    return rtlPattern.test(str);\n  }\n  return false;\n};\n\n/**\n * Capitalizes the first letter of a given string (locale aware).\n *\n * @function\n * @memberof i18n/util\n * @param {String} str - The string to capitalize.\n * @returns {String} The capitalized string.\n * @public\n */\nexports.isRtlText = isRtlText;\nvar toCapitalized = function toCapitalized(str) {\n  return (0, _case.toUpperCase)(str.slice(0, 1)) + str.slice(1);\n};\n\n/**\n * Capitalizes every word in a string. Words are separated by spaces, not necessarily\n * word-breaks (locale aware).\n *\n * @function\n * @memberof i18n/util\n * @param {String} str - The string to capitalize.\n * @returns {String} The word-cased string.\n * @public\n */\nexports.toCapitalized = toCapitalized;\nvar toWordCase = function toWordCase(str) {\n  return str.split(' ').map(toCapitalized).join(' ');\n};\n\n/**\n * Locale-safely convert a string to lower case.\n *\n * @name toLowerCase\n * @function\n * @memberof i18n/util\n * @param {String} inString String to convert to lower case\n * @returns {String} Lower-cased string\n * @public\n */\n\n/**\n * Locale-safely convert a string to upper case.\n *\n * @name toUpperCase\n * @function\n * @memberof i18n/util\n * @param {String} inString String to convert to upper case\n * @returns {String} Upper-cased string\n * @public\n */\nexports.toWordCase = toWordCase;"],"mappings":"AAAA,YAAY;;AAEZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAC3CC,KAAK,EAAE;AACT,CAAC,CAAC;AACFD,OAAO,CAACE,aAAa,GAAGF,OAAO,CAACG,SAAS,GAAG,KAAK,CAAC;AAClDL,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,aAAa,EAAE;EAC5CI,UAAU,EAAE,IAAI;EAChBC,GAAG,EAAE,SAASA,GAAGA,CAAA,EAAG;IAClB,OAAOC,KAAK,CAACC,WAAW;EAC1B;AACF,CAAC,CAAC;AACFT,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,aAAa,EAAE;EAC5CI,UAAU,EAAE,IAAI;EAChBC,GAAG,EAAE,SAASA,GAAGA,CAAA,EAAG;IAClB,OAAOC,KAAK,CAACE,WAAW;EAC1B;AACF,CAAC,CAAC;AACFR,OAAO,CAACS,UAAU,GAAG,KAAK,CAAC;AAC3BC,OAAO,CAAC,aAAa,CAAC;AACtB,IAAIJ,KAAK,GAAGI,OAAO,CAAC,aAAa,CAAC;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAIC,UAAU,GAAG,+FAA+F;;AAEhH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAIR,SAAS,GAAG,SAASA,SAASA,CAACS,GAAG,EAAE;EACtC,IAAI,OAAOA,GAAG,KAAK,QAAQ,EAAE;IAC3B,OAAOD,UAAU,CAACE,IAAI,CAACD,GAAG,CAAC;EAC7B;EACA,OAAO,KAAK;AACd,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAZ,OAAO,CAACG,SAAS,GAAGA,SAAS;AAC7B,IAAID,aAAa,GAAG,SAASA,aAAaA,CAACU,GAAG,EAAE;EAC9C,OAAO,CAAC,CAAC,EAAEN,KAAK,CAACE,WAAW,EAAEI,GAAG,CAACE,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,GAAGF,GAAG,CAACE,KAAK,CAAC,CAAC,CAAC;AAC/D,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAd,OAAO,CAACE,aAAa,GAAGA,aAAa;AACrC,IAAIO,UAAU,GAAG,SAASA,UAAUA,CAACG,GAAG,EAAE;EACxC,OAAOA,GAAG,CAACG,KAAK,CAAC,GAAG,CAAC,CAACC,GAAG,CAACd,aAAa,CAAC,CAACe,IAAI,CAAC,GAAG,CAAC;AACpD,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAjB,OAAO,CAACS,UAAU,GAAGA,UAAU"},"metadata":{},"sourceType":"module","externalDependencies":[]}