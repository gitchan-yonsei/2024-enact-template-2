{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.removeCancelHandler = exports.forCancel = exports.addCancelHandler = void 0;\nvar _handle = require(\"@enact/core/handle\");\n/**\n * Array of cancel handlers. If any of these returns `false`, `forCancel` will return `false`;\n *\n * @type {Function[]}\n * @private\n */\nvar cancelHandlers = [\n// always support the Escape key\n(0, _handle.forKey)('cancel')];\n\n/**\n * Event handler compatible with {@link core/handle} that allows the handler chain to\n * continue for any cancel event. A cancel event is an Escape key press by default but can be\n * extended adding additional handlers using\n * {@link ui/Cancelable/cancelHandler.addCancelHandler}.\n *\n * @function\n * @memberof ui/Cancelable\n * @param  {Object} ev Event object\n * @returns {Boolean} `true` to stop the handler chain\n * @private\n */\nvar forCancel = function forCancel(ev) {\n  var ok = false;\n  cancelHandlers.forEach(function (fn) {\n    // if any handler returns true, we don't need to call any more\n    ok = ok || fn(ev);\n  });\n  return ok;\n};\n\n/**\n * Adds an event handler to filter cancel events.\n *\n * @function\n * @memberof ui/Cancelable\n * @param {Function} handler\tFunction that will receive the event and should return `true` if\n *\t\t\t\t\t\t\t\tthe event is a cancel event.\n * @returns {undefined}\n * @public\n */\nexports.forCancel = forCancel;\nvar addCancelHandler = function addCancelHandler(handler) {\n  if (cancelHandlers.indexOf(handler) < 0) {\n    cancelHandlers.push(handler);\n  }\n};\n\n/**\n * Removes an event handler to filter cancel events\n *\n * @function\n * @memberof ui/Cancelable\n * @param {Function} handler A previously added filter function\n * @returns {undefined}\n * @public\n */\nexports.addCancelHandler = addCancelHandler;\nvar removeCancelHandler = function removeCancelHandler(handler) {\n  var index = cancelHandlers.indexOf(handler);\n  if (index >= 0) {\n    cancelHandlers.splice(index, 1);\n  }\n};\nexports.removeCancelHandler = removeCancelHandler;","map":{"version":3,"names":["Object","defineProperty","exports","value","removeCancelHandler","forCancel","addCancelHandler","_handle","require","cancelHandlers","forKey","ev","ok","forEach","fn","handler","indexOf","push","index","splice"],"sources":["/Users/gitchan/Projects/gitchan-yonsei/2024-enact-template/node_modules/@enact/ui/Cancelable/cancelHandler.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.removeCancelHandler = exports.forCancel = exports.addCancelHandler = void 0;\nvar _handle = require(\"@enact/core/handle\");\n/**\n * Array of cancel handlers. If any of these returns `false`, `forCancel` will return `false`;\n *\n * @type {Function[]}\n * @private\n */\nvar cancelHandlers = [\n// always support the Escape key\n(0, _handle.forKey)('cancel')];\n\n/**\n * Event handler compatible with {@link core/handle} that allows the handler chain to\n * continue for any cancel event. A cancel event is an Escape key press by default but can be\n * extended adding additional handlers using\n * {@link ui/Cancelable/cancelHandler.addCancelHandler}.\n *\n * @function\n * @memberof ui/Cancelable\n * @param  {Object} ev Event object\n * @returns {Boolean} `true` to stop the handler chain\n * @private\n */\nvar forCancel = function forCancel(ev) {\n  var ok = false;\n  cancelHandlers.forEach(function (fn) {\n    // if any handler returns true, we don't need to call any more\n    ok = ok || fn(ev);\n  });\n  return ok;\n};\n\n/**\n * Adds an event handler to filter cancel events.\n *\n * @function\n * @memberof ui/Cancelable\n * @param {Function} handler\tFunction that will receive the event and should return `true` if\n *\t\t\t\t\t\t\t\tthe event is a cancel event.\n * @returns {undefined}\n * @public\n */\nexports.forCancel = forCancel;\nvar addCancelHandler = function addCancelHandler(handler) {\n  if (cancelHandlers.indexOf(handler) < 0) {\n    cancelHandlers.push(handler);\n  }\n};\n\n/**\n * Removes an event handler to filter cancel events\n *\n * @function\n * @memberof ui/Cancelable\n * @param {Function} handler A previously added filter function\n * @returns {undefined}\n * @public\n */\nexports.addCancelHandler = addCancelHandler;\nvar removeCancelHandler = function removeCancelHandler(handler) {\n  var index = cancelHandlers.indexOf(handler);\n  if (index >= 0) {\n    cancelHandlers.splice(index, 1);\n  }\n};\nexports.removeCancelHandler = removeCancelHandler;"],"mappings":"AAAA,YAAY;;AAEZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAC3CC,KAAK,EAAE;AACT,CAAC,CAAC;AACFD,OAAO,CAACE,mBAAmB,GAAGF,OAAO,CAACG,SAAS,GAAGH,OAAO,CAACI,gBAAgB,GAAG,KAAK,CAAC;AACnF,IAAIC,OAAO,GAAGC,OAAO,CAAC,oBAAoB,CAAC;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA,IAAIC,cAAc,GAAG;AACrB;AACA,CAAC,CAAC,EAAEF,OAAO,CAACG,MAAM,EAAE,QAAQ,CAAC,CAAC;;AAE9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAIL,SAAS,GAAG,SAASA,SAASA,CAACM,EAAE,EAAE;EACrC,IAAIC,EAAE,GAAG,KAAK;EACdH,cAAc,CAACI,OAAO,CAAC,UAAUC,EAAE,EAAE;IACnC;IACAF,EAAE,GAAGA,EAAE,IAAIE,EAAE,CAACH,EAAE,CAAC;EACnB,CAAC,CAAC;EACF,OAAOC,EAAE;AACX,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAV,OAAO,CAACG,SAAS,GAAGA,SAAS;AAC7B,IAAIC,gBAAgB,GAAG,SAASA,gBAAgBA,CAACS,OAAO,EAAE;EACxD,IAAIN,cAAc,CAACO,OAAO,CAACD,OAAO,CAAC,GAAG,CAAC,EAAE;IACvCN,cAAc,CAACQ,IAAI,CAACF,OAAO,CAAC;EAC9B;AACF,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAb,OAAO,CAACI,gBAAgB,GAAGA,gBAAgB;AAC3C,IAAIF,mBAAmB,GAAG,SAASA,mBAAmBA,CAACW,OAAO,EAAE;EAC9D,IAAIG,KAAK,GAAGT,cAAc,CAACO,OAAO,CAACD,OAAO,CAAC;EAC3C,IAAIG,KAAK,IAAI,CAAC,EAAE;IACdT,cAAc,CAACU,MAAM,CAACD,KAAK,EAAE,CAAC,CAAC;EACjC;AACF,CAAC;AACDhB,OAAO,CAACE,mBAAmB,GAAGA,mBAAmB"},"metadata":{},"sourceType":"module","externalDependencies":[]}