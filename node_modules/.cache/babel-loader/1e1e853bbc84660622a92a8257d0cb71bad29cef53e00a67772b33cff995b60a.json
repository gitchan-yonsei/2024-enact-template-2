{"ast":null,"code":"var _jsxFileName = \"/Users/gitchan/Projects/gitchan-yonsei/2024-enact-template/src/views/Main.js\";\nimport Alert from \"@enact/sandstone/Alert\";\nimport BodyText from \"@enact/sandstone/BodyText\";\nimport Button from \"@enact/sandstone/Button\";\nimport { Header, Panel } from \"@enact/sandstone/Panels\";\nimport { usePopup } from \"./MainState\";\nimport css from \"./Main.module.less\";\nimport $L from \"@enact/i18n/$L\";\nimport { useProcStat } from \"../hooks/useData\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Main = props => {\n  const procStat = useProcStat();\n  const {\n    isPopupOpen,\n    handlePopupOpen,\n    handlePopupClose,\n    handleLaunchApp\n  } = usePopup();\n  var subscriptionHandle;\n  subscriptionHandle = webOS.service.request('luna://com.palm.connectionmanager', {\n    method: 'getStatus',\n    parameters: {\n      subscribe: true\n    },\n    onSuccess: function (inResponse) {\n      if (typeof inResponse.subscribed != 'undefined') {\n        if (!inResponse.subscribed) {\n          console.log('Failed to subscribe network state');\n          return;\n        }\n      }\n      console.log('Result: ' + JSON.stringify(inResponse));\n      // To-Do something\n    },\n\n    onFailure: function (inError) {\n      console.log('Failed to get network state');\n      console.log('[' + inError.errorCode + ']: ' + inError.errorText);\n      // To-Do something\n      return;\n    }\n  });\n  return /*#__PURE__*/_jsxDEV(Panel, {\n    ...props,\n    children: /*#__PURE__*/_jsxDEV(Header, {\n      title: $L(request)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 2\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 10\n  }, this);\n\n  //   return (\n  //     <Panel {...props}>\n  //       <Header title={$L(\"Enact Template\")} />\n  //       <BodyText>{$L(\"This is a main page of sample application.\")}</BodyText>\n  //       <Button onClick={handlePopupOpen} size=\"small\" className={css.buttonCell}>\n  //         {$L(\"Open Alert\")}\n  //       </Button>\n  //       <BodyText>{`procStat : ${JSON.stringify(procStat)}`}</BodyText>\n  //       <Alert type=\"overlay\" open={isPopupOpen} onClose={handlePopupClose}>\n  //         <span>{$L(\"This is an alert message.\")}</span>\n  //         <buttons>\n  //           <Button\n  //             size=\"small\"\n  //             className={css.buttonCell}\n  //             onClick={handleLaunchApp}\n  //           >\n  //             Launch\n  //           </Button>\n  //           <Button\n  //             size=\"small\"\n  //             className={css.buttonCell}\n  //             onClick={handlePopupClose}\n  //           >\n  //             {$L(\"Close\")}\n  //           </Button>\n  //         </buttons>\n  //       </Alert>\n  //     </Panel>\n  //   );\n};\n\nexport default Main;","map":{"version":3,"names":["Alert","BodyText","Button","Header","Panel","usePopup","css","$L","useProcStat","jsxDEV","_jsxDEV","Main","props","procStat","isPopupOpen","handlePopupOpen","handlePopupClose","handleLaunchApp","subscriptionHandle","webOS","service","request","method","parameters","subscribe","onSuccess","inResponse","subscribed","console","log","JSON","stringify","onFailure","inError","errorCode","errorText","children","title","fileName","_jsxFileName","lineNumber","columnNumber"],"sources":["/Users/gitchan/Projects/gitchan-yonsei/2024-enact-template/src/views/Main.js"],"sourcesContent":["import Alert from \"@enact/sandstone/Alert\";\nimport BodyText from \"@enact/sandstone/BodyText\";\nimport Button from \"@enact/sandstone/Button\";\nimport { Header, Panel } from \"@enact/sandstone/Panels\";\nimport { usePopup } from \"./MainState\";\nimport css from \"./Main.module.less\";\nimport $L from \"@enact/i18n/$L\";\nimport { useProcStat } from \"../hooks/useData\";\n\nconst Main = (props) => {\n  const procStat = useProcStat();\n  const { isPopupOpen, handlePopupOpen, handlePopupClose, handleLaunchApp } =\n    usePopup();\n\n\tvar subscriptionHandle;\n\n\tsubscriptionHandle = webOS.service.request(\n\t  'luna://com.palm.connectionmanager',\n\t  {\n\t\tmethod: 'getStatus',\n\t\tparameters: { subscribe: true },\n\t\tonSuccess: function (inResponse) {\n\t\t  if (typeof inResponse.subscribed != 'undefined') {\n\t\t\tif (!inResponse.subscribed) {\n\t\t\t  console.log('Failed to subscribe network state');\n\t\t\t  return;\n\t\t\t}\n\t\t  }\n\t\n\t\t  console.log('Result: ' + JSON.stringify(inResponse));\n\t\t  // To-Do something\n\t\t},\n\t\tonFailure: function (inError) {\n\t\t  console.log('Failed to get network state');\n\t\t  console.log('[' + inError.errorCode + ']: ' + inError.errorText);\n\t\t  // To-Do something\n\t\t  return;\n\t\t},\n\t  }\n\t);\n  return <Panel {...props}>\n\t<Header title={$L(request)}/>\n  </Panel>;\n\n  //   return (\n  //     <Panel {...props}>\n  //       <Header title={$L(\"Enact Template\")} />\n  //       <BodyText>{$L(\"This is a main page of sample application.\")}</BodyText>\n  //       <Button onClick={handlePopupOpen} size=\"small\" className={css.buttonCell}>\n  //         {$L(\"Open Alert\")}\n  //       </Button>\n  //       <BodyText>{`procStat : ${JSON.stringify(procStat)}`}</BodyText>\n  //       <Alert type=\"overlay\" open={isPopupOpen} onClose={handlePopupClose}>\n  //         <span>{$L(\"This is an alert message.\")}</span>\n  //         <buttons>\n  //           <Button\n  //             size=\"small\"\n  //             className={css.buttonCell}\n  //             onClick={handleLaunchApp}\n  //           >\n  //             Launch\n  //           </Button>\n  //           <Button\n  //             size=\"small\"\n  //             className={css.buttonCell}\n  //             onClick={handlePopupClose}\n  //           >\n  //             {$L(\"Close\")}\n  //           </Button>\n  //         </buttons>\n  //       </Alert>\n  //     </Panel>\n  //   );\n};\n\nexport default Main;\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,wBAAwB;AAC1C,OAAOC,QAAQ,MAAM,2BAA2B;AAChD,OAAOC,MAAM,MAAM,yBAAyB;AAC5C,SAASC,MAAM,EAAEC,KAAK,QAAQ,yBAAyB;AACvD,SAASC,QAAQ,QAAQ,aAAa;AACtC,OAAOC,GAAG,MAAM,oBAAoB;AACpC,OAAOC,EAAE,MAAM,gBAAgB;AAC/B,SAASC,WAAW,QAAQ,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE/C,MAAMC,IAAI,GAAIC,KAAK,IAAK;EACtB,MAAMC,QAAQ,GAAGL,WAAW,CAAC,CAAC;EAC9B,MAAM;IAAEM,WAAW;IAAEC,eAAe;IAAEC,gBAAgB;IAAEC;EAAgB,CAAC,GACvEZ,QAAQ,CAAC,CAAC;EAEb,IAAIa,kBAAkB;EAEtBA,kBAAkB,GAAGC,KAAK,CAACC,OAAO,CAACC,OAAO,CACxC,mCAAmC,EACnC;IACDC,MAAM,EAAE,WAAW;IACnBC,UAAU,EAAE;MAAEC,SAAS,EAAE;IAAK,CAAC;IAC/BC,SAAS,EAAE,SAAAA,CAAUC,UAAU,EAAE;MAC/B,IAAI,OAAOA,UAAU,CAACC,UAAU,IAAI,WAAW,EAAE;QAClD,IAAI,CAACD,UAAU,CAACC,UAAU,EAAE;UAC1BC,OAAO,CAACC,GAAG,CAAC,mCAAmC,CAAC;UAChD;QACF;MACC;MAEAD,OAAO,CAACC,GAAG,CAAC,UAAU,GAAGC,IAAI,CAACC,SAAS,CAACL,UAAU,CAAC,CAAC;MACpD;IACF,CAAC;;IACDM,SAAS,EAAE,SAAAA,CAAUC,OAAO,EAAE;MAC5BL,OAAO,CAACC,GAAG,CAAC,6BAA6B,CAAC;MAC1CD,OAAO,CAACC,GAAG,CAAC,GAAG,GAAGI,OAAO,CAACC,SAAS,GAAG,KAAK,GAAGD,OAAO,CAACE,SAAS,CAAC;MAChE;MACA;IACF;EACC,CACF,CAAC;EACA,oBAAOzB,OAAA,CAACN,KAAK;IAAA,GAAKQ,KAAK;IAAAwB,QAAA,eACxB1B,OAAA,CAACP,MAAM;MAACkC,KAAK,EAAE9B,EAAE,CAACc,OAAO;IAAE;MAAAiB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAC;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACrB,CAAC;;EAER;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;AACF,CAAC;;AAED,eAAe9B,IAAI"},"metadata":{},"sourceType":"module","externalDependencies":[]}