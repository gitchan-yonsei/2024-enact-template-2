{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nObject.defineProperty(exports, \"Cell\", {\n  enumerable: true,\n  get: function get() {\n    return _Cell.Cell;\n  }\n});\nObject.defineProperty(exports, \"CellBase\", {\n  enumerable: true,\n  get: function get() {\n    return _Cell.CellBase;\n  }\n});\nObject.defineProperty(exports, \"CellDecorator\", {\n  enumerable: true,\n  get: function get() {\n    return _Cell.CellDecorator;\n  }\n});\nexports[\"default\"] = exports.Row = exports.LayoutDecorator = exports.LayoutBase = exports.Layout = exports.Column = void 0;\nvar _propTypes = _interopRequireDefault(require(\"@enact/core/internal/prop-types\"));\nvar _kind = _interopRequireDefault(require(\"@enact/core/kind\"));\nvar _propTypes2 = _interopRequireDefault(require(\"prop-types\"));\nvar _ForwardRef = _interopRequireDefault(require(\"../ForwardRef\"));\nvar _Cell = require(\"./Cell\");\nvar _LayoutModule = _interopRequireDefault(require(\"./Layout.module.css\"));\nvar _jsxRuntime = require(\"react/jsx-runtime\");\nvar _excluded = [\"component\", \"componentRef\"];\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n  var key, i;\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n  return target;\n}\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n  return target;\n}\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n  return target;\n}\nfunction _defineProperty(obj, key, value) {\n  key = _toPropertyKey(key);\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nfunction _toPropertyKey(arg) {\n  var key = _toPrimitive(arg, \"string\");\n  return typeof key === \"symbol\" ? key : String(key);\n}\nfunction _toPrimitive(input, hint) {\n  if (typeof input !== \"object\" || input === null) return input;\n  var prim = input[Symbol.toPrimitive];\n  if (prim !== undefined) {\n    var res = prim.call(input, hint || \"default\");\n    if (typeof res !== \"object\") return res;\n    throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n  }\n  return (hint === \"string\" ? String : Number)(input);\n} /**\n   * A convenient tool for laying-out content using `Layout`, `Cell`, `Row`, and `Column`.\n   *\n   * Layout is a powerful and versatile tool used for arranging content on the screen. On a conceptual\n   * level, it mixes the best parts of HTML tables wtih the best parts of HTML framesets, both of\n   * which were largely abandoned for their drawbacks, ignoring their strengths. A `Layout` is simply\n   * a container for `Cell`, the only \"legal\" child. Conversely, `Cell` may only be used in a\n   * `Layout`. Cells in a Layout can either be positioned next to each other (horizontally) or\n   * above/below each other (vertically) in what we refer to as a {@link ui/Layout.Row|Row} or\n   * {@link ui/Layout.Column|Column}, respectively.\n   *\n   * The `Row` and `Column` layout presets describe the direction of layout for their children. This\n   * can sometimes cause confusion. A `Row` of children naturally forms a _layout_ whose children can\n   * have the _appearance_ of columns. To keep things clear, think about the layout rather than the\n   * what the children themselves represent.\n   *\n   * `Layout` is an implementation of flex-box, but with built-in rails, properties, and features to\n   * help avoid common problems with flex-box; things like content overflowing, sizing quirks, and\n   * positioning problems regarding content of unknown or undefined dimension.\n   *\n   * The following scenarios are some common cases where `Layout` can truly help out. A quality of\n   * `Cell` you'll see below is that when a `Cell` has no defined size, it automatically sizes to fill\n   * any remaining space in the `Layout`. If there are multiple auto-sizing `Cell` components, they\n   * share the space, subdividing it equally among themselves. It's great to leverage this and only\n   * apply sizes to `Cell`s which must have defined sizes. `shrink` is one of the ways you can impose\n   * size guidelines on a `Cell`. It automatically fits the size of the Cell to the size of its\n   * content.\n   *\n   * A row of cells where the last one should always attach to the right side, regardless of the size\n   * of the main \"content\" cell:\n   * ```\n   * ┌───────┬─┐\n   * │Main   │R│\n   * └───────┴─┘\n   * ```\n   *\n   * ```\n   * <Row>\n   * \t<Cell>Main Content</Cell>\n   * \t<Cell shrink>Right Side</Cell>\n   * </Row>\n   * ```\n   *\n   * A \"two-column\" layout with equal sized cells using `Row`:\n   * ```\n   * ┌────┬────┐\n   * │L   │R   │\n   * └────┴────┘\n   * ```\n   *\n   * ```\n   * <Row style={{height: '100%'}}>\n   * \t<Cell>Left Column</Cell>\n   * \t<Cell>Right Column</Cell>\n   * </Row>\n   * ```\n   * *Remember:* The cells of the `Row` are the columns in our layout. It's likely that in a complex\n   * layout `Column` would be used inside the left and right cells to arrange the components, as in\n   * the example below.\n   *\n   * A full-height sidebar with a header and body to the right:\n   * ```\n   * ┌──┬──────┐\n   * │S │HEADER│\n   * │  ├──────┤\n   * │  │Body  │\n   * │  │      │\n   * └──┴──────┘\n   * ```\n   *\n   * ```\n   * <Row style={{height: '100%'}}>\n   * \t<Cell size=\"20%\">Sidebar</Cell>\n   * \t<Cell>\n   * \t\t<Column>\n   * \t\t\t<Cell size={90} component=\"header\">\n   * \t\t\t\t<h1>HEADER</h1>\n   * \t\t\t</Cell>\n   * \t\t\t<Cell>\n   * \t\t\t\t<p>Body area</p>\n   * \t\t\t</Cell>\n   * \t\t</Column>\n   * \t</Cell>\n   * </Row>\n   * ```\n   * *Note:* Here, we've set the height of `Row` so it fills the height of the screen, allowing the\n   * Sidebar Cell and content Cell to stretch from the top to the bottom. We've also leveraged the\n   * `component` prop on the header cell, which tells `Cell` to render itself as a \"header\" HTML tag\n   * rather than its usual \"div\" tag.\n   *\n   * The example below produces a layout like the following:\n   * ```\n   * ┌─┬─────┬─┐\n   * │o│Item │o│\n   * └─┴─────┴─┘\n   * ```\n   *\n   * You'll notice the use of some special classes in the example: `\"debug layout\"`. Adding these on\n   * any element in your DOM hierarchy will enable borders in Layout and Cell to help visualize what\n   * is happening in the layout. They automatically change color the deeper in the stack they go.\n   *\n   * @example\n   * <Layout className=\"debug layout\">\n   * \t<Cell shrink>\n   * \t\t<button>First</button>\n   * \t</Cell>\n   * \t<Cell>\n   * \t\t<div>A div with some long text in it</div>\n   * \t</Cell>\n   * \t<Cell shrink>\n   * \t\t<button>Last</button>\n   * \t</Cell>\n   * </Layout>\n   *\n   * @module ui/Layout\n   * @exports Cell\n   * @exports CellBase\n   * @exports CellDecorator\n   * @exports Column\n   * @exports Layout\n   * @exports LayoutBase\n   * @exports LayoutDecorator\n   * @exports Row\n   */ /**\n       * A container for `Cell`s.\n       *\n       * A stateless component that acts as a containing area for {@link ui/Layout.Cell|Cells} to be\n       * positioned in a row or a column (horizontally or vertically, respectively. It supports an\n       * {@link ui/Layout.LayoutBase.orientation|orientation} property for laying-out its contents\n       * (`Cells`) in an organized, readable way.\n       *\n       * Example:\n       * ```\n       * import Input from '@enact/moonstone/Input';\n       * import css from './LayoutExample.less';\n       * ...\n       * <fieldset>\n       * \t<Layout align=\"center\">\n       * \t\t<Cell component=\"label\" size=\"40%\" className={css.label} shrink>First Name</Cell>\n       * \t\t<Cell component={Input} placeholder=\"First\" className={css.input} />\n       * \t</Layout>\n       * \t<Layout align=\"center\">\n       * \t\t<Cell component=\"label\" size=\"40%\" className={css.label} shrink>Last Name</Cell>\n       * \t\t<Cell component={Input} placeholder=\"Last\" className={css.input} />\n       * \t</Layout>\n       * </fieldset>\n       * ```\n       *\n       * @class LayoutBase\n       * @ui\n       * @memberof ui/Layout\n       * @public\n       */\nvar LayoutBase = (0, _kind[\"default\"])({\n  name: 'LayoutBase',\n  propTypes: /** @lends ui/Layout.LayoutBase.prototype */{\n    /**\n     * The alignment of children.\n     *\n     * Aligns the children {@link ui/Layout.Cell|Cells} vertically in the case of a horizontal\n     * layout or horizontally in the case of a vertical layout. `\"start\"`, `\"center\"` and\n     * `\"end\"` are the most commonly used, although all values of `align-items` are supported.\n     * `\"start\"` refers to the top in a horizontal layout, and left in a vertical LTR layout\n     * `\"end\"` refers to the bottom in a horizontal layout, and right in a vertical LTR layout\n     * `\"start\"` and `\"end\"` reverse places when in a vertical layout in a RTL locale.\n     * This includes support shorthand for combining `align-items` and `justify-content` into\n     * a single property, separated by a space, in that order. This allows you to specify both\n     * the horizontal and vertical alignment in one property, separated by a space.\n     *\n     * For example, `align=\"center space-between\"` means `align-items: center` and\n     * `justify-content: space-between` for each. `justify-content` property can be used to\n     * align the Cells on the main axis and adjust gaps among the Cells. To declare the\n     * `justify-content` property only, just add a heading space for `align` prop string like\n     * `align=\" space-between\"`. The default value for `align-items` is `stretch`. It can be\n     * also used for `align` prop like `align=\"stretch space-between\"`. All values of\n     * `justify-content` are supported, like `start`, `end`, `center`, `space-between`,\n     * `space-around`, and `space-evenly`.\n     *\n     * ```\n     * <Layout align=\"center space-around\">\n     *     <Cell>Left Column</Cell>\n     *     <Cell>Right Column</Cell>\n     * </Layout>\n     * ```\n     * ```\n     * <Layout align=\" space-between\">\n     *     <Cell>Left Column</Cell>\n     *     <Cell>Right Column</Cell>\n     * </Layout>\n     * ```\n     *\n     * @type {String}\n     * @public\n     */\n    align: _propTypes2[\"default\"].string,\n    /**\n     * Only {@link ui/Layout.Cell|Cell} components are supported as children.\n     *\n     * @type {Cell|Cell[]}\n     * @public\n     */\n    children: _propTypes2[\"default\"].any,\n    /**\n     * The type of component to use to render as the `Layout`. May be a DOM node name (e.g 'div',\n     * 'span', etc.) or a custom component.\n     *\n     * @type {String|Component}\n     * @default 'div'\n     * @public\n     */\n    component: _propTypes[\"default\"].renderable,\n    /**\n     * Called with a reference to the root component.\n     *\n     * When using {@link ui/Layout.Layout}, the `ref` prop is forwarded to this component\n     * as `componentRef`.\n     *\n     * @type {Object|Function}\n     * @public\n     */\n    componentRef: _propTypes[\"default\"].ref,\n    /**\n     * Allows this `Layout` to have following siblings drawn on the same line as itself\n     * instead of carving out the entire horizontal space for itself.\n     *\n     * @type {Boolean}\n     * @default false\n     * @public\n     */\n    inline: _propTypes2[\"default\"].bool,\n    /**\n     * The orientation of the `Layout`, i.e. how the children {@link ui/Layout.Cell|Cells} are\n     * positioned on the screen. Must be either `'horizontal'` or `'vertical'`.\n     *\n     * @type {String}\n     * @default 'horizontal'\n     * @public\n     */\n    orientation: _propTypes2[\"default\"].oneOf(['horizontal', 'vertical']),\n    /**\n     * Sets the Layout's `flex-wrap` values.\n     *\n     * Determines how a Layout handles its cells if there are more than fit in the available\n     * space. This works like a normal `Boolean` prop, but also accepts strings for customization\n     * beyond the basic on/off support. In addition to `true` and `false`, the following strings\n     * are supported: 'wrap', 'nowrap', 'reverse'. 'reverse' performs standard line wrapping but\n     * additional lines are placed above/before the preceding line instead of below/after.\n     *\n     * @type {Boolean|String}\n     * @public\n     */\n    wrap: _propTypes2[\"default\"].oneOfType([_propTypes2[\"default\"].bool, _propTypes2[\"default\"].oneOf(['reverse', 'nowrap', 'wrap'])])\n  },\n  defaultProps: {\n    component: 'div',\n    inline: false,\n    orientation: 'horizontal',\n    wrap: false\n  },\n  styles: {\n    css: _LayoutModule[\"default\"],\n    className: 'layout'\n  },\n  computed: {\n    className: function className(_ref) {\n      var inline = _ref.inline,\n        orientation = _ref.orientation,\n        wrap = _ref.wrap,\n        styler = _ref.styler;\n      return styler.append(orientation, {\n        inline: inline,\n        nowrap: wrap === false || wrap === 'nowrap',\n        wrap: wrap === true || wrap === 'wrap',\n        wrapReverse: wrap === 'wrapReverse'\n      });\n    },\n    style: function style(_ref2) {\n      var align = _ref2.align,\n        _style = _ref2.style;\n      if (!align) return _style;\n\n      // This is effectively a polyfill for the upcoming `place-items` prop which is shorthand\n      // for align-items and justify-items together\n      var alignParts = align.split(' ');\n      return _objectSpread(_objectSpread({}, _style), {}, {\n        alignItems: (0, _Cell.toFlexAlign)(alignParts[0]),\n        justifyContent: (0, _Cell.toFlexAlign)(alignParts[1])\n      });\n    }\n  },\n  render: function render(_ref3) {\n    var Component = _ref3.component,\n      componentRef = _ref3.componentRef,\n      rest = _objectWithoutProperties(_ref3, _excluded);\n    delete rest.align;\n    delete rest.inline;\n    delete rest.orientation;\n    delete rest.wrap;\n    return /*#__PURE__*/(0, _jsxRuntime.jsx)(Component, _objectSpread({\n      ref: componentRef\n    }, rest));\n  }\n});\n\n/**\n * Applies Layout behaviors.\n *\n * @hoc\n * @memberof ui/Layout\n * @mixes ui/ForwardRef.ForwardRef\n * @public\n */\nexports.LayoutBase = LayoutBase;\nvar LayoutDecorator = (0, _ForwardRef[\"default\"])({\n  prop: 'componentRef'\n});\n\n/**\n * A container for `Cell`s.\n *\n * A stateless component that acts as a containing area for {@link ui/Layout.Cell|Cells} to be\n * positioned in a row or a column (horizontally or vertically, respectively. It supports an\n * {@link ui/Layout.LayoutBase.orientation|orientation} property for laying-out its contents\n * (`Cells`) in an organized, readable way.\n *\n * Example:\n * ```\n * import Input from '@enact/moonstone/Input';\n * import css from './LayoutExample.less';\n * ...\n * <fieldset>\n * \t<Layout align=\"center\">\n * \t\t<Cell component=\"label\" size=\"40%\" className={css.label} shrink>First Name</Cell>\n * \t\t<Cell component={Input} placeholder=\"First\" className={css.input} />\n * \t</Layout>\n * \t<Layout align=\"center\">\n * \t\t<Cell component=\"label\" size=\"40%\" className={css.label} shrink>Last Name</Cell>\n * \t\t<Cell component={Input} placeholder=\"Last\" className={css.input} />\n * \t</Layout>\n * </fieldset>\n * ```\n *\n * @class Layout\n * @memberof ui/Layout\n * @extends ui/Layout.LayoutBase\n * @mixes ui/ForwardRef.ForwardRef\n * @omit componentRef\n * @ui\n * @public\n */\nexports.LayoutDecorator = LayoutDecorator;\nvar Layout = LayoutDecorator(LayoutBase);\n\n/**\n * Shorthand for `<Layout orientation=\"vertical\">`, which positions its\n * {@link ui/Layout.Cell|Cells} vertically.\n * ```\n * ┌────┐\n * ├────┤\n * ├────┤\n * ├────┤\n * └────┘\n * ```\n *\n * @class Column\n * @memberof ui/Layout\n * @extends ui/Layout.Layout\n * @mixes ui/ForwardRef.ForwardRef\n * @ui\n * @public\n */\nexports.Layout = Layout;\nvar Column = LayoutDecorator(function (props) {\n  return LayoutBase.inline(_objectSpread(_objectSpread({}, props), {}, {\n    orientation: 'vertical'\n  }));\n});\nexports.Column = Column;\nColumn.displayName = 'Column';\n\n/**\n * Shorthand for `<Layout orientation=\"horizontal\">`, which positions its\n * {@link ui/Layout.Cell|Cells} horizontally.\n * ```\n * ┌─┬─┬─┬─┐\n * │ │ │ │ │\n * └─┴─┴─┴─┘\n * ```\n *\n * @class Row\n * @memberof ui/Layout\n * @extends ui/Layout.Layout\n * @mixes ui/ForwardRef.ForwardRef\n * @ui\n * @public\n */\nvar Row = LayoutDecorator(function (props) {\n  return LayoutBase.inline(_objectSpread(_objectSpread({}, props), {}, {\n    orientation: 'horizontal'\n  }));\n});\nexports.Row = Row;\nRow.displayName = 'Row';\nvar _default = Layout;\nexports[\"default\"] = _default;","map":{"version":3,"names":["Object","defineProperty","exports","value","enumerable","get","_Cell","Cell","CellBase","CellDecorator","Row","LayoutDecorator","LayoutBase","Layout","Column","_propTypes","_interopRequireDefault","require","_kind","_propTypes2","_ForwardRef","_LayoutModule","_jsxRuntime","_excluded","obj","__esModule","_objectWithoutProperties","source","excluded","target","_objectWithoutPropertiesLoose","key","i","getOwnPropertySymbols","sourceSymbolKeys","length","indexOf","prototype","propertyIsEnumerable","call","sourceKeys","keys","ownKeys","object","enumerableOnly","symbols","filter","sym","getOwnPropertyDescriptor","push","apply","_objectSpread","arguments","forEach","_defineProperty","getOwnPropertyDescriptors","defineProperties","_toPropertyKey","configurable","writable","arg","_toPrimitive","String","input","hint","prim","Symbol","toPrimitive","undefined","res","TypeError","Number","name","propTypes","align","string","children","any","component","renderable","componentRef","ref","inline","bool","orientation","oneOf","wrap","oneOfType","defaultProps","styles","css","className","computed","_ref","styler","append","nowrap","wrapReverse","style","_ref2","_style","alignParts","split","alignItems","toFlexAlign","justifyContent","render","_ref3","Component","rest","jsx","prop","props","displayName","_default"],"sources":["/Users/gitchan/Projects/gitchan-yonsei/2024-enact-template/node_modules/@enact/ui/Layout/Layout.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nObject.defineProperty(exports, \"Cell\", {\n  enumerable: true,\n  get: function get() {\n    return _Cell.Cell;\n  }\n});\nObject.defineProperty(exports, \"CellBase\", {\n  enumerable: true,\n  get: function get() {\n    return _Cell.CellBase;\n  }\n});\nObject.defineProperty(exports, \"CellDecorator\", {\n  enumerable: true,\n  get: function get() {\n    return _Cell.CellDecorator;\n  }\n});\nexports[\"default\"] = exports.Row = exports.LayoutDecorator = exports.LayoutBase = exports.Layout = exports.Column = void 0;\nvar _propTypes = _interopRequireDefault(require(\"@enact/core/internal/prop-types\"));\nvar _kind = _interopRequireDefault(require(\"@enact/core/kind\"));\nvar _propTypes2 = _interopRequireDefault(require(\"prop-types\"));\nvar _ForwardRef = _interopRequireDefault(require(\"../ForwardRef\"));\nvar _Cell = require(\"./Cell\");\nvar _LayoutModule = _interopRequireDefault(require(\"./Layout.module.css\"));\nvar _jsxRuntime = require(\"react/jsx-runtime\");\nvar _excluded = [\"component\", \"componentRef\"];\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nfunction _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return typeof key === \"symbol\" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (typeof input !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (typeof res !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); } /**\n                                                                                                                                                                                                                                                                                                                                                                                           * A convenient tool for laying-out content using `Layout`, `Cell`, `Row`, and `Column`.\n                                                                                                                                                                                                                                                                                                                                                                                           *\n                                                                                                                                                                                                                                                                                                                                                                                           * Layout is a powerful and versatile tool used for arranging content on the screen. On a conceptual\n                                                                                                                                                                                                                                                                                                                                                                                           * level, it mixes the best parts of HTML tables wtih the best parts of HTML framesets, both of\n                                                                                                                                                                                                                                                                                                                                                                                           * which were largely abandoned for their drawbacks, ignoring their strengths. A `Layout` is simply\n                                                                                                                                                                                                                                                                                                                                                                                           * a container for `Cell`, the only \"legal\" child. Conversely, `Cell` may only be used in a\n                                                                                                                                                                                                                                                                                                                                                                                           * `Layout`. Cells in a Layout can either be positioned next to each other (horizontally) or\n                                                                                                                                                                                                                                                                                                                                                                                           * above/below each other (vertically) in what we refer to as a {@link ui/Layout.Row|Row} or\n                                                                                                                                                                                                                                                                                                                                                                                           * {@link ui/Layout.Column|Column}, respectively.\n                                                                                                                                                                                                                                                                                                                                                                                           *\n                                                                                                                                                                                                                                                                                                                                                                                           * The `Row` and `Column` layout presets describe the direction of layout for their children. This\n                                                                                                                                                                                                                                                                                                                                                                                           * can sometimes cause confusion. A `Row` of children naturally forms a _layout_ whose children can\n                                                                                                                                                                                                                                                                                                                                                                                           * have the _appearance_ of columns. To keep things clear, think about the layout rather than the\n                                                                                                                                                                                                                                                                                                                                                                                           * what the children themselves represent.\n                                                                                                                                                                                                                                                                                                                                                                                           *\n                                                                                                                                                                                                                                                                                                                                                                                           * `Layout` is an implementation of flex-box, but with built-in rails, properties, and features to\n                                                                                                                                                                                                                                                                                                                                                                                           * help avoid common problems with flex-box; things like content overflowing, sizing quirks, and\n                                                                                                                                                                                                                                                                                                                                                                                           * positioning problems regarding content of unknown or undefined dimension.\n                                                                                                                                                                                                                                                                                                                                                                                           *\n                                                                                                                                                                                                                                                                                                                                                                                           * The following scenarios are some common cases where `Layout` can truly help out. A quality of\n                                                                                                                                                                                                                                                                                                                                                                                           * `Cell` you'll see below is that when a `Cell` has no defined size, it automatically sizes to fill\n                                                                                                                                                                                                                                                                                                                                                                                           * any remaining space in the `Layout`. If there are multiple auto-sizing `Cell` components, they\n                                                                                                                                                                                                                                                                                                                                                                                           * share the space, subdividing it equally among themselves. It's great to leverage this and only\n                                                                                                                                                                                                                                                                                                                                                                                           * apply sizes to `Cell`s which must have defined sizes. `shrink` is one of the ways you can impose\n                                                                                                                                                                                                                                                                                                                                                                                           * size guidelines on a `Cell`. It automatically fits the size of the Cell to the size of its\n                                                                                                                                                                                                                                                                                                                                                                                           * content.\n                                                                                                                                                                                                                                                                                                                                                                                           *\n                                                                                                                                                                                                                                                                                                                                                                                           * A row of cells where the last one should always attach to the right side, regardless of the size\n                                                                                                                                                                                                                                                                                                                                                                                           * of the main \"content\" cell:\n                                                                                                                                                                                                                                                                                                                                                                                           * ```\n                                                                                                                                                                                                                                                                                                                                                                                           * ┌───────┬─┐\n                                                                                                                                                                                                                                                                                                                                                                                           * │Main   │R│\n                                                                                                                                                                                                                                                                                                                                                                                           * └───────┴─┘\n                                                                                                                                                                                                                                                                                                                                                                                           * ```\n                                                                                                                                                                                                                                                                                                                                                                                           *\n                                                                                                                                                                                                                                                                                                                                                                                           * ```\n                                                                                                                                                                                                                                                                                                                                                                                           * <Row>\n                                                                                                                                                                                                                                                                                                                                                                                           * \t<Cell>Main Content</Cell>\n                                                                                                                                                                                                                                                                                                                                                                                           * \t<Cell shrink>Right Side</Cell>\n                                                                                                                                                                                                                                                                                                                                                                                           * </Row>\n                                                                                                                                                                                                                                                                                                                                                                                           * ```\n                                                                                                                                                                                                                                                                                                                                                                                           *\n                                                                                                                                                                                                                                                                                                                                                                                           * A \"two-column\" layout with equal sized cells using `Row`:\n                                                                                                                                                                                                                                                                                                                                                                                           * ```\n                                                                                                                                                                                                                                                                                                                                                                                           * ┌────┬────┐\n                                                                                                                                                                                                                                                                                                                                                                                           * │L   │R   │\n                                                                                                                                                                                                                                                                                                                                                                                           * └────┴────┘\n                                                                                                                                                                                                                                                                                                                                                                                           * ```\n                                                                                                                                                                                                                                                                                                                                                                                           *\n                                                                                                                                                                                                                                                                                                                                                                                           * ```\n                                                                                                                                                                                                                                                                                                                                                                                           * <Row style={{height: '100%'}}>\n                                                                                                                                                                                                                                                                                                                                                                                           * \t<Cell>Left Column</Cell>\n                                                                                                                                                                                                                                                                                                                                                                                           * \t<Cell>Right Column</Cell>\n                                                                                                                                                                                                                                                                                                                                                                                           * </Row>\n                                                                                                                                                                                                                                                                                                                                                                                           * ```\n                                                                                                                                                                                                                                                                                                                                                                                           * *Remember:* The cells of the `Row` are the columns in our layout. It's likely that in a complex\n                                                                                                                                                                                                                                                                                                                                                                                           * layout `Column` would be used inside the left and right cells to arrange the components, as in\n                                                                                                                                                                                                                                                                                                                                                                                           * the example below.\n                                                                                                                                                                                                                                                                                                                                                                                           *\n                                                                                                                                                                                                                                                                                                                                                                                           * A full-height sidebar with a header and body to the right:\n                                                                                                                                                                                                                                                                                                                                                                                           * ```\n                                                                                                                                                                                                                                                                                                                                                                                           * ┌──┬──────┐\n                                                                                                                                                                                                                                                                                                                                                                                           * │S │HEADER│\n                                                                                                                                                                                                                                                                                                                                                                                           * │  ├──────┤\n                                                                                                                                                                                                                                                                                                                                                                                           * │  │Body  │\n                                                                                                                                                                                                                                                                                                                                                                                           * │  │      │\n                                                                                                                                                                                                                                                                                                                                                                                           * └──┴──────┘\n                                                                                                                                                                                                                                                                                                                                                                                           * ```\n                                                                                                                                                                                                                                                                                                                                                                                           *\n                                                                                                                                                                                                                                                                                                                                                                                           * ```\n                                                                                                                                                                                                                                                                                                                                                                                           * <Row style={{height: '100%'}}>\n                                                                                                                                                                                                                                                                                                                                                                                           * \t<Cell size=\"20%\">Sidebar</Cell>\n                                                                                                                                                                                                                                                                                                                                                                                           * \t<Cell>\n                                                                                                                                                                                                                                                                                                                                                                                           * \t\t<Column>\n                                                                                                                                                                                                                                                                                                                                                                                           * \t\t\t<Cell size={90} component=\"header\">\n                                                                                                                                                                                                                                                                                                                                                                                           * \t\t\t\t<h1>HEADER</h1>\n                                                                                                                                                                                                                                                                                                                                                                                           * \t\t\t</Cell>\n                                                                                                                                                                                                                                                                                                                                                                                           * \t\t\t<Cell>\n                                                                                                                                                                                                                                                                                                                                                                                           * \t\t\t\t<p>Body area</p>\n                                                                                                                                                                                                                                                                                                                                                                                           * \t\t\t</Cell>\n                                                                                                                                                                                                                                                                                                                                                                                           * \t\t</Column>\n                                                                                                                                                                                                                                                                                                                                                                                           * \t</Cell>\n                                                                                                                                                                                                                                                                                                                                                                                           * </Row>\n                                                                                                                                                                                                                                                                                                                                                                                           * ```\n                                                                                                                                                                                                                                                                                                                                                                                           * *Note:* Here, we've set the height of `Row` so it fills the height of the screen, allowing the\n                                                                                                                                                                                                                                                                                                                                                                                           * Sidebar Cell and content Cell to stretch from the top to the bottom. We've also leveraged the\n                                                                                                                                                                                                                                                                                                                                                                                           * `component` prop on the header cell, which tells `Cell` to render itself as a \"header\" HTML tag\n                                                                                                                                                                                                                                                                                                                                                                                           * rather than its usual \"div\" tag.\n                                                                                                                                                                                                                                                                                                                                                                                           *\n                                                                                                                                                                                                                                                                                                                                                                                           * The example below produces a layout like the following:\n                                                                                                                                                                                                                                                                                                                                                                                           * ```\n                                                                                                                                                                                                                                                                                                                                                                                           * ┌─┬─────┬─┐\n                                                                                                                                                                                                                                                                                                                                                                                           * │o│Item │o│\n                                                                                                                                                                                                                                                                                                                                                                                           * └─┴─────┴─┘\n                                                                                                                                                                                                                                                                                                                                                                                           * ```\n                                                                                                                                                                                                                                                                                                                                                                                           *\n                                                                                                                                                                                                                                                                                                                                                                                           * You'll notice the use of some special classes in the example: `\"debug layout\"`. Adding these on\n                                                                                                                                                                                                                                                                                                                                                                                           * any element in your DOM hierarchy will enable borders in Layout and Cell to help visualize what\n                                                                                                                                                                                                                                                                                                                                                                                           * is happening in the layout. They automatically change color the deeper in the stack they go.\n                                                                                                                                                                                                                                                                                                                                                                                           *\n                                                                                                                                                                                                                                                                                                                                                                                           * @example\n                                                                                                                                                                                                                                                                                                                                                                                           * <Layout className=\"debug layout\">\n                                                                                                                                                                                                                                                                                                                                                                                           * \t<Cell shrink>\n                                                                                                                                                                                                                                                                                                                                                                                           * \t\t<button>First</button>\n                                                                                                                                                                                                                                                                                                                                                                                           * \t</Cell>\n                                                                                                                                                                                                                                                                                                                                                                                           * \t<Cell>\n                                                                                                                                                                                                                                                                                                                                                                                           * \t\t<div>A div with some long text in it</div>\n                                                                                                                                                                                                                                                                                                                                                                                           * \t</Cell>\n                                                                                                                                                                                                                                                                                                                                                                                           * \t<Cell shrink>\n                                                                                                                                                                                                                                                                                                                                                                                           * \t\t<button>Last</button>\n                                                                                                                                                                                                                                                                                                                                                                                           * \t</Cell>\n                                                                                                                                                                                                                                                                                                                                                                                           * </Layout>\n                                                                                                                                                                                                                                                                                                                                                                                           *\n                                                                                                                                                                                                                                                                                                                                                                                           * @module ui/Layout\n                                                                                                                                                                                                                                                                                                                                                                                           * @exports Cell\n                                                                                                                                                                                                                                                                                                                                                                                           * @exports CellBase\n                                                                                                                                                                                                                                                                                                                                                                                           * @exports CellDecorator\n                                                                                                                                                                                                                                                                                                                                                                                           * @exports Column\n                                                                                                                                                                                                                                                                                                                                                                                           * @exports Layout\n                                                                                                                                                                                                                                                                                                                                                                                           * @exports LayoutBase\n                                                                                                                                                                                                                                                                                                                                                                                           * @exports LayoutDecorator\n                                                                                                                                                                                                                                                                                                                                                                                           * @exports Row\n                                                                                                                                                                                                                                                                                                                                                                                           */ /**\n                                                                                                                                                                                                                                                                                                                                                                                               * A container for `Cell`s.\n                                                                                                                                                                                                                                                                                                                                                                                               *\n                                                                                                                                                                                                                                                                                                                                                                                               * A stateless component that acts as a containing area for {@link ui/Layout.Cell|Cells} to be\n                                                                                                                                                                                                                                                                                                                                                                                               * positioned in a row or a column (horizontally or vertically, respectively. It supports an\n                                                                                                                                                                                                                                                                                                                                                                                               * {@link ui/Layout.LayoutBase.orientation|orientation} property for laying-out its contents\n                                                                                                                                                                                                                                                                                                                                                                                               * (`Cells`) in an organized, readable way.\n                                                                                                                                                                                                                                                                                                                                                                                               *\n                                                                                                                                                                                                                                                                                                                                                                                               * Example:\n                                                                                                                                                                                                                                                                                                                                                                                               * ```\n                                                                                                                                                                                                                                                                                                                                                                                               * import Input from '@enact/moonstone/Input';\n                                                                                                                                                                                                                                                                                                                                                                                               * import css from './LayoutExample.less';\n                                                                                                                                                                                                                                                                                                                                                                                               * ...\n                                                                                                                                                                                                                                                                                                                                                                                               * <fieldset>\n                                                                                                                                                                                                                                                                                                                                                                                               * \t<Layout align=\"center\">\n                                                                                                                                                                                                                                                                                                                                                                                               * \t\t<Cell component=\"label\" size=\"40%\" className={css.label} shrink>First Name</Cell>\n                                                                                                                                                                                                                                                                                                                                                                                               * \t\t<Cell component={Input} placeholder=\"First\" className={css.input} />\n                                                                                                                                                                                                                                                                                                                                                                                               * \t</Layout>\n                                                                                                                                                                                                                                                                                                                                                                                               * \t<Layout align=\"center\">\n                                                                                                                                                                                                                                                                                                                                                                                               * \t\t<Cell component=\"label\" size=\"40%\" className={css.label} shrink>Last Name</Cell>\n                                                                                                                                                                                                                                                                                                                                                                                               * \t\t<Cell component={Input} placeholder=\"Last\" className={css.input} />\n                                                                                                                                                                                                                                                                                                                                                                                               * \t</Layout>\n                                                                                                                                                                                                                                                                                                                                                                                               * </fieldset>\n                                                                                                                                                                                                                                                                                                                                                                                               * ```\n                                                                                                                                                                                                                                                                                                                                                                                               *\n                                                                                                                                                                                                                                                                                                                                                                                               * @class LayoutBase\n                                                                                                                                                                                                                                                                                                                                                                                               * @ui\n                                                                                                                                                                                                                                                                                                                                                                                               * @memberof ui/Layout\n                                                                                                                                                                                                                                                                                                                                                                                               * @public\n                                                                                                                                                                                                                                                                                                                                                                                               */\nvar LayoutBase = (0, _kind[\"default\"])({\n  name: 'LayoutBase',\n  propTypes: /** @lends ui/Layout.LayoutBase.prototype */{\n    /**\n     * The alignment of children.\n     *\n     * Aligns the children {@link ui/Layout.Cell|Cells} vertically in the case of a horizontal\n     * layout or horizontally in the case of a vertical layout. `\"start\"`, `\"center\"` and\n     * `\"end\"` are the most commonly used, although all values of `align-items` are supported.\n     * `\"start\"` refers to the top in a horizontal layout, and left in a vertical LTR layout\n     * `\"end\"` refers to the bottom in a horizontal layout, and right in a vertical LTR layout\n     * `\"start\"` and `\"end\"` reverse places when in a vertical layout in a RTL locale.\n     * This includes support shorthand for combining `align-items` and `justify-content` into\n     * a single property, separated by a space, in that order. This allows you to specify both\n     * the horizontal and vertical alignment in one property, separated by a space.\n     *\n     * For example, `align=\"center space-between\"` means `align-items: center` and\n     * `justify-content: space-between` for each. `justify-content` property can be used to\n     * align the Cells on the main axis and adjust gaps among the Cells. To declare the\n     * `justify-content` property only, just add a heading space for `align` prop string like\n     * `align=\" space-between\"`. The default value for `align-items` is `stretch`. It can be\n     * also used for `align` prop like `align=\"stretch space-between\"`. All values of\n     * `justify-content` are supported, like `start`, `end`, `center`, `space-between`,\n     * `space-around`, and `space-evenly`.\n     *\n     * ```\n     * <Layout align=\"center space-around\">\n     *     <Cell>Left Column</Cell>\n     *     <Cell>Right Column</Cell>\n     * </Layout>\n     * ```\n     * ```\n     * <Layout align=\" space-between\">\n     *     <Cell>Left Column</Cell>\n     *     <Cell>Right Column</Cell>\n     * </Layout>\n     * ```\n     *\n     * @type {String}\n     * @public\n     */\n    align: _propTypes2[\"default\"].string,\n    /**\n     * Only {@link ui/Layout.Cell|Cell} components are supported as children.\n     *\n     * @type {Cell|Cell[]}\n     * @public\n     */\n    children: _propTypes2[\"default\"].any,\n    /**\n     * The type of component to use to render as the `Layout`. May be a DOM node name (e.g 'div',\n     * 'span', etc.) or a custom component.\n     *\n     * @type {String|Component}\n     * @default 'div'\n     * @public\n     */\n    component: _propTypes[\"default\"].renderable,\n    /**\n     * Called with a reference to the root component.\n     *\n     * When using {@link ui/Layout.Layout}, the `ref` prop is forwarded to this component\n     * as `componentRef`.\n     *\n     * @type {Object|Function}\n     * @public\n     */\n    componentRef: _propTypes[\"default\"].ref,\n    /**\n     * Allows this `Layout` to have following siblings drawn on the same line as itself\n     * instead of carving out the entire horizontal space for itself.\n     *\n     * @type {Boolean}\n     * @default false\n     * @public\n     */\n    inline: _propTypes2[\"default\"].bool,\n    /**\n     * The orientation of the `Layout`, i.e. how the children {@link ui/Layout.Cell|Cells} are\n     * positioned on the screen. Must be either `'horizontal'` or `'vertical'`.\n     *\n     * @type {String}\n     * @default 'horizontal'\n     * @public\n     */\n    orientation: _propTypes2[\"default\"].oneOf(['horizontal', 'vertical']),\n    /**\n     * Sets the Layout's `flex-wrap` values.\n     *\n     * Determines how a Layout handles its cells if there are more than fit in the available\n     * space. This works like a normal `Boolean` prop, but also accepts strings for customization\n     * beyond the basic on/off support. In addition to `true` and `false`, the following strings\n     * are supported: 'wrap', 'nowrap', 'reverse'. 'reverse' performs standard line wrapping but\n     * additional lines are placed above/before the preceding line instead of below/after.\n     *\n     * @type {Boolean|String}\n     * @public\n     */\n    wrap: _propTypes2[\"default\"].oneOfType([_propTypes2[\"default\"].bool, _propTypes2[\"default\"].oneOf(['reverse', 'nowrap', 'wrap'])])\n  },\n  defaultProps: {\n    component: 'div',\n    inline: false,\n    orientation: 'horizontal',\n    wrap: false\n  },\n  styles: {\n    css: _LayoutModule[\"default\"],\n    className: 'layout'\n  },\n  computed: {\n    className: function className(_ref) {\n      var inline = _ref.inline,\n        orientation = _ref.orientation,\n        wrap = _ref.wrap,\n        styler = _ref.styler;\n      return styler.append(orientation, {\n        inline: inline,\n        nowrap: wrap === false || wrap === 'nowrap',\n        wrap: wrap === true || wrap === 'wrap',\n        wrapReverse: wrap === 'wrapReverse'\n      });\n    },\n    style: function style(_ref2) {\n      var align = _ref2.align,\n        _style = _ref2.style;\n      if (!align) return _style;\n\n      // This is effectively a polyfill for the upcoming `place-items` prop which is shorthand\n      // for align-items and justify-items together\n      var alignParts = align.split(' ');\n      return _objectSpread(_objectSpread({}, _style), {}, {\n        alignItems: (0, _Cell.toFlexAlign)(alignParts[0]),\n        justifyContent: (0, _Cell.toFlexAlign)(alignParts[1])\n      });\n    }\n  },\n  render: function render(_ref3) {\n    var Component = _ref3.component,\n      componentRef = _ref3.componentRef,\n      rest = _objectWithoutProperties(_ref3, _excluded);\n    delete rest.align;\n    delete rest.inline;\n    delete rest.orientation;\n    delete rest.wrap;\n    return /*#__PURE__*/(0, _jsxRuntime.jsx)(Component, _objectSpread({\n      ref: componentRef\n    }, rest));\n  }\n});\n\n/**\n * Applies Layout behaviors.\n *\n * @hoc\n * @memberof ui/Layout\n * @mixes ui/ForwardRef.ForwardRef\n * @public\n */\nexports.LayoutBase = LayoutBase;\nvar LayoutDecorator = (0, _ForwardRef[\"default\"])({\n  prop: 'componentRef'\n});\n\n/**\n * A container for `Cell`s.\n *\n * A stateless component that acts as a containing area for {@link ui/Layout.Cell|Cells} to be\n * positioned in a row or a column (horizontally or vertically, respectively. It supports an\n * {@link ui/Layout.LayoutBase.orientation|orientation} property for laying-out its contents\n * (`Cells`) in an organized, readable way.\n *\n * Example:\n * ```\n * import Input from '@enact/moonstone/Input';\n * import css from './LayoutExample.less';\n * ...\n * <fieldset>\n * \t<Layout align=\"center\">\n * \t\t<Cell component=\"label\" size=\"40%\" className={css.label} shrink>First Name</Cell>\n * \t\t<Cell component={Input} placeholder=\"First\" className={css.input} />\n * \t</Layout>\n * \t<Layout align=\"center\">\n * \t\t<Cell component=\"label\" size=\"40%\" className={css.label} shrink>Last Name</Cell>\n * \t\t<Cell component={Input} placeholder=\"Last\" className={css.input} />\n * \t</Layout>\n * </fieldset>\n * ```\n *\n * @class Layout\n * @memberof ui/Layout\n * @extends ui/Layout.LayoutBase\n * @mixes ui/ForwardRef.ForwardRef\n * @omit componentRef\n * @ui\n * @public\n */\nexports.LayoutDecorator = LayoutDecorator;\nvar Layout = LayoutDecorator(LayoutBase);\n\n/**\n * Shorthand for `<Layout orientation=\"vertical\">`, which positions its\n * {@link ui/Layout.Cell|Cells} vertically.\n * ```\n * ┌────┐\n * ├────┤\n * ├────┤\n * ├────┤\n * └────┘\n * ```\n *\n * @class Column\n * @memberof ui/Layout\n * @extends ui/Layout.Layout\n * @mixes ui/ForwardRef.ForwardRef\n * @ui\n * @public\n */\nexports.Layout = Layout;\nvar Column = LayoutDecorator(function (props) {\n  return LayoutBase.inline(_objectSpread(_objectSpread({}, props), {}, {\n    orientation: 'vertical'\n  }));\n});\nexports.Column = Column;\nColumn.displayName = 'Column';\n\n/**\n * Shorthand for `<Layout orientation=\"horizontal\">`, which positions its\n * {@link ui/Layout.Cell|Cells} horizontally.\n * ```\n * ┌─┬─┬─┬─┐\n * │ │ │ │ │\n * └─┴─┴─┴─┘\n * ```\n *\n * @class Row\n * @memberof ui/Layout\n * @extends ui/Layout.Layout\n * @mixes ui/ForwardRef.ForwardRef\n * @ui\n * @public\n */\nvar Row = LayoutDecorator(function (props) {\n  return LayoutBase.inline(_objectSpread(_objectSpread({}, props), {}, {\n    orientation: 'horizontal'\n  }));\n});\nexports.Row = Row;\nRow.displayName = 'Row';\nvar _default = Layout;\nexports[\"default\"] = _default;"],"mappings":"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;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KA3H0X,CA2HI;AAC9X;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAInD,UAAU,GAAG,CAAC,CAAC,EAAEM,KAAK,CAAC,SAAS,CAAC,EAAE;EACrCsD,IAAI,EAAE,YAAY;EAClBC,SAAS,EAAE,4CAA4C;IACrD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACIC,KAAK,EAAEvD,WAAW,CAAC,SAAS,CAAC,CAACwD,MAAM;IACpC;AACJ;AACA;AACA;AACA;AACA;IACIC,QAAQ,EAAEzD,WAAW,CAAC,SAAS,CAAC,CAAC0D,GAAG;IACpC;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;IACIC,SAAS,EAAE/D,UAAU,CAAC,SAAS,CAAC,CAACgE,UAAU;IAC3C;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACIC,YAAY,EAAEjE,UAAU,CAAC,SAAS,CAAC,CAACkE,GAAG;IACvC;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;IACIC,MAAM,EAAE/D,WA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"},"metadata":{},"sourceType":"module","externalDependencies":[]}