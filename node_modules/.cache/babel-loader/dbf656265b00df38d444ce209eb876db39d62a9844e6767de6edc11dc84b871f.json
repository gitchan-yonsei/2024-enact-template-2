{"ast":null,"code":"\"use strict\";\n\nfunction _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();\n}\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];\n  return arr2;\n}\nfunction _iterableToArrayLimit(arr, i) {\n  var _i = null == arr ? null : \"undefined\" != typeof Symbol && arr[Symbol.iterator] || arr[\"@@iterator\"];\n  if (null != _i) {\n    var _s,\n      _e,\n      _x,\n      _r,\n      _arr = [],\n      _n = !0,\n      _d = !1;\n    try {\n      if (_x = (_i = _i.call(arr)).next, 0 === i) {\n        if (Object(_i) !== _i) return;\n        _n = !1;\n      } else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0);\n    } catch (err) {\n      _d = !0, _e = err;\n    } finally {\n      try {\n        if (!_n && null != _i[\"return\"] && (_r = _i[\"return\"](), Object(_r) !== _r)) return;\n      } finally {\n        if (_d) throw _e;\n      }\n    }\n    return _arr;\n  }\n}\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\nvar fontMap = {};\nvar currentLocale = null;\n\n// Generate a single font-face rule\nvar buildFont = function buildFont(config) {\n  if (!config && !config.name) {\n    return '';\n  }\n  var strOut = '@font-face { \\n' + \"  font-family: \\\"\".concat(config.name, \"\\\";\\n\");\n  if (config.weight) {\n    strOut += \"  font-weight: \".concat(config.weight, \";\\n\");\n  }\n  if (config.localName) {\n    // Accept a string or an array. If it's a string convert it into an array\n    if (typeof config.localName === 'string') {\n      config.localName = [config.localName];\n    }\n    // Take our array and update each of its elements to be CSS \"local()\" strings\n    config.localName = config.localName.map(function (f) {\n      return \"local(\\\"\".concat(f, \"\\\")\");\n    });\n    // Join all our strings together with a comma, so it's a valid CSS `src` rule\n    strOut += \"  src: \".concat(config.localName.join(', '), \";\\n\");\n  }\n  if (config.unicodeRange) {\n    strOut += \"  unicode-range: \".concat(config.unicodeRange, \";\\n\");\n  }\n  strOut += '} \\n';\n  return strOut;\n};\n\n// Generate a collection of font-face rules, in multiple font-variants\nvar buildFontSet = function buildFontSet(fontName, fonts, strLang, bitDefault) {\n  var strOut = '',\n    name = bitDefault ? fontName : fontName + ' ' + strLang;\n  if (fonts[strLang].regular) {\n    // Build Regular\n    strOut += buildFont({\n      name: name,\n      localName: fonts[strLang].regular,\n      unicodeRange: fonts[strLang].unicodeRange\n    });\n\n    // Build Light\n    strOut += buildFont({\n      name: name,\n      localName: fonts[strLang].light || fonts[strLang].regular,\n      weight: 300,\n      unicodeRange: fonts[strLang].unicodeRange\n    });\n\n    // Build SemiBold\n    strOut += buildFont({\n      name: name,\n      localName: fonts[strLang].semibold || fonts[strLang].bold || fonts[strLang].regular,\n      weight: 600,\n      unicodeRange: fonts[strLang].unicodeRange\n    });\n\n    // Build Bold\n    strOut += buildFont({\n      name: name,\n      localName: fonts[strLang].bold || fonts[strLang].regular,\n      weight: 700,\n      unicodeRange: fonts[strLang].unicodeRange\n    });\n  }\n  return strOut;\n};\nvar buildFontDefinitionCss = function buildFontDefinitionCss(locale, buildOverrides) {\n  var matchLang = locale.match(/\\b([a-z]{2})\\b/),\n    language = matchLang && matchLang[1],\n    matchScript = locale.match(/\\b([a-z]{4})\\b/i),\n    script = matchScript && matchScript[1],\n    matchReg = locale.match(/\\b([A-Z]{2}|[0-9]{3})\\b/),\n    region = matchReg && matchReg[1];\n  var fontDefinitionCss = '';\n\n  // Build all the fonts so they could be explicitly called\n  for (var fontName in fontMap) {\n    var fonts = fontMap[fontName];\n    for (var lang in fonts) {\n      if (!buildOverrides) {\n        fontDefinitionCss += buildFontSet(fontName, fonts, lang);\n      } else {\n        // Set up the override for locale-specific font.\n        // la = language, sc = script, re = region; `la-RE` or `zh-Hans-HK`\n        var _lang$split = lang.split('-'),\n          _lang$split2 = _slicedToArray(_lang$split, 3),\n          la = _lang$split2[0],\n          sc = _lang$split2[1],\n          re = _lang$split2[2];\n\n        // if script is not specified, fall back to second part representing region\n        if (!re && sc && sc.length === 2) {\n          re = sc;\n          sc = null;\n        }\n        var matchesRegion = re ? re === region : true;\n        var matchesScript = sc ? sc === script : true;\n        if (la === language && matchesRegion && matchesScript) {\n          fontDefinitionCss += buildFontSet(fontName, fonts, lang, true);\n        }\n      }\n    }\n  }\n  return fontDefinitionCss;\n};\nvar insertFontDefinitionCss = function insertFontDefinitionCss(styleId, fontDefinitionCss) {\n  if (typeof document !== 'undefined') {\n    // Normal execution in a browser window\n    var styleElem = document.getElementById(styleId);\n    if (!styleElem) {\n      styleElem = document.createElement('style');\n      styleElem.setAttribute('id', styleId);\n      styleElem.setAttribute('type', 'text/css');\n      document.head.appendChild(styleElem);\n    }\n    styleElem.innerHTML = fontDefinitionCss;\n  } else {\n    var tag = \"<style type=\\\"text/css\\\" id=\\\"\".concat(styleId, \"\\\">\").concat(fontDefinitionCss, \"</style>\");\n\n    // We're rendering without the DOM; return the font definition stylesheet element string.\n    return tag;\n  }\n};\nfunction fontGenerator(locale) {\n  var styleId = 'localized-fonts';\n  if (typeof document !== 'undefined' && document.getElementById(styleId)) {\n    return;\n  }\n  return insertFontDefinitionCss(styleId, buildFontDefinitionCss(locale));\n}\nfunction fontOverrideGenerator(locale) {\n  return insertFontDefinitionCss('localized-fonts-override', buildFontDefinitionCss(locale, true));\n}\n\n/**\n * Generates locale-specific font rules allowing any locale to have its own custom font. Each\n * locale-font from the configuration block (defined in this file) is generated at run-time. If the\n * locale you're currently in is in the locale-font list an additional `@font-face` rule will be\n * generated that will override the standard font.\n *\n * In addition to the standard override-font being generated, named region-specific fonts are also\n * generated. This lets you incorporate language specific fonts when you're outside of one of those\n * regions; useful in a language list context where you want the name of each language to be\n * represented by that language's designated font.\n *\n * Below is example genarated-output of the Urdu (\"ur\") locale-font.\n *\n * ```css\n * &#64;font-face {\n * \tfont-family: 'Custom Font ur';\n * \tfont-weight: 500;\n * \tsrc: local('CustomFont_Urdu');\n * \tunicode-range: U+0600-U+06FF, U+FE70-U+FEFE, U+FB50-U+FDFF;\n * }\n * &#64;font-face {\n * \tfont-family: 'Custom Font ur Bold';\n * \tfont-weight: 700;\n * \tsrc: local('CustomFont_Urdu');\n * \tunicode-range: U+0600-U+06FF, U+FE70-U+FEFE, U+FB50-U+FDFF;\n * }\n * &#64;font-face {\n * \tfont-family: 'Custom Font ur Light';\n * \tfont-weight: 300;\n * \tsrc: local('CustomFont_Urdu');\n * \tunicode-range: U+0600-U+06FF, U+FE70-U+FEFE, U+FB50-U+FDFF;\n * }\n * ```\n *\n * @param {String} locale Locale string in the format\n * @returns {String} An HTML fragment of the `<style>` when prerendering\n *\n * @public\n */\nfunction generateFontRules(locale) {\n  if (!locale || locale === currentLocale) {\n    return;\n  }\n  currentLocale = locale;\n  return fontGenerator(locale);\n}\nfunction generateFontOverrideRules(locale) {\n  if (!locale) {\n    return;\n  }\n  return fontOverrideGenerator(locale);\n}\n\n/**\n * Adds a localed font to the font map\n *\n * ```\n * addLocalizedFont('My Theme Font', {\n *   'ur': {\n *      regular: 'My Theme Urdu',\n *      unicodeRange:\n *        'U+600-6FF,' +\n *        'U+FE70-FEFE,' +\n *        'U+FB50-FDFF'\n *    }\n * })\n * ```\n *\n * @param {String} name  Name of the font\n * @param {Object} fonts Object mapping font names and unicode ranges to locales\n *\n * @public\n */\nfunction addLocalizedFont(name, fonts) {\n  fontMap[name] = fonts;\n  if (currentLocale) {\n    fontGenerator(currentLocale);\n  }\n}\n\n/**\n * Removes a localized font from the font map\n *\n * @param   {String} name Name of the font\n *\n * @public\n */\nfunction removeLocalizedFont(name) {\n  delete fontMap[name];\n  if (currentLocale) {\n    fontGenerator(currentLocale);\n  }\n}\nmodule.exports = generateFontRules;\nmodule.exports.generateFontRules = generateFontRules;\nmodule.exports.generateFontOverrideRules = generateFontOverrideRules;\nmodule.exports.addLocalizedFont = addLocalizedFont;\nmodule.exports.removeLocalizedFont = removeLocalizedFont;","map":{"version":3,"names":["_slicedToArray","arr","i","_arrayWithHoles","_iterableToArrayLimit","_unsupportedIterableToArray","_nonIterableRest","TypeError","o","minLen","_arrayLikeToArray","n","Object","prototype","toString","call","slice","constructor","name","Array","from","test","len","length","arr2","_i","Symbol","iterator","_s","_e","_x","_r","_arr","_n","_d","next","done","push","value","err","isArray","fontMap","currentLocale","buildFont","config","strOut","concat","weight","localName","map","f","join","unicodeRange","buildFontSet","fontName","fonts","strLang","bitDefault","regular","light","semibold","bold","buildFontDefinitionCss","locale","buildOverrides","matchLang","match","language","matchScript","script","matchReg","region","fontDefinitionCss","lang","_lang$split","split","_lang$split2","la","sc","re","matchesRegion","matchesScript","insertFontDefinitionCss","styleId","document","styleElem","getElementById","createElement","setAttribute","head","appendChild","innerHTML","tag","fontGenerator","fontOverrideGenerator","generateFontRules","generateFontOverrideRules","addLocalizedFont","removeLocalizedFont","module","exports"],"sources":["/Users/gitchan/Projects/gitchan-yonsei/2024-enact-template/node_modules/@enact/ui/internal/localized-fonts/localized-fonts.js"],"sourcesContent":["\"use strict\";\n\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\nfunction _iterableToArrayLimit(arr, i) { var _i = null == arr ? null : \"undefined\" != typeof Symbol && arr[Symbol.iterator] || arr[\"@@iterator\"]; if (null != _i) { var _s, _e, _x, _r, _arr = [], _n = !0, _d = !1; try { if (_x = (_i = _i.call(arr)).next, 0 === i) { if (Object(_i) !== _i) return; _n = !1; } else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0); } catch (err) { _d = !0, _e = err; } finally { try { if (!_n && null != _i[\"return\"] && (_r = _i[\"return\"](), Object(_r) !== _r)) return; } finally { if (_d) throw _e; } } return _arr; } }\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\nvar fontMap = {};\nvar currentLocale = null;\n\n// Generate a single font-face rule\nvar buildFont = function buildFont(config) {\n  if (!config && !config.name) {\n    return '';\n  }\n  var strOut = '@font-face { \\n' + \"  font-family: \\\"\".concat(config.name, \"\\\";\\n\");\n  if (config.weight) {\n    strOut += \"  font-weight: \".concat(config.weight, \";\\n\");\n  }\n  if (config.localName) {\n    // Accept a string or an array. If it's a string convert it into an array\n    if (typeof config.localName === 'string') {\n      config.localName = [config.localName];\n    }\n    // Take our array and update each of its elements to be CSS \"local()\" strings\n    config.localName = config.localName.map(function (f) {\n      return \"local(\\\"\".concat(f, \"\\\")\");\n    });\n    // Join all our strings together with a comma, so it's a valid CSS `src` rule\n    strOut += \"  src: \".concat(config.localName.join(', '), \";\\n\");\n  }\n  if (config.unicodeRange) {\n    strOut += \"  unicode-range: \".concat(config.unicodeRange, \";\\n\");\n  }\n  strOut += '} \\n';\n  return strOut;\n};\n\n// Generate a collection of font-face rules, in multiple font-variants\nvar buildFontSet = function buildFontSet(fontName, fonts, strLang, bitDefault) {\n  var strOut = '',\n    name = bitDefault ? fontName : fontName + ' ' + strLang;\n  if (fonts[strLang].regular) {\n    // Build Regular\n    strOut += buildFont({\n      name: name,\n      localName: fonts[strLang].regular,\n      unicodeRange: fonts[strLang].unicodeRange\n    });\n\n    // Build Light\n    strOut += buildFont({\n      name: name,\n      localName: fonts[strLang].light || fonts[strLang].regular,\n      weight: 300,\n      unicodeRange: fonts[strLang].unicodeRange\n    });\n\n    // Build SemiBold\n    strOut += buildFont({\n      name: name,\n      localName: fonts[strLang].semibold || fonts[strLang].bold || fonts[strLang].regular,\n      weight: 600,\n      unicodeRange: fonts[strLang].unicodeRange\n    });\n\n    // Build Bold\n    strOut += buildFont({\n      name: name,\n      localName: fonts[strLang].bold || fonts[strLang].regular,\n      weight: 700,\n      unicodeRange: fonts[strLang].unicodeRange\n    });\n  }\n  return strOut;\n};\nvar buildFontDefinitionCss = function buildFontDefinitionCss(locale, buildOverrides) {\n  var matchLang = locale.match(/\\b([a-z]{2})\\b/),\n    language = matchLang && matchLang[1],\n    matchScript = locale.match(/\\b([a-z]{4})\\b/i),\n    script = matchScript && matchScript[1],\n    matchReg = locale.match(/\\b([A-Z]{2}|[0-9]{3})\\b/),\n    region = matchReg && matchReg[1];\n  var fontDefinitionCss = '';\n\n  // Build all the fonts so they could be explicitly called\n  for (var fontName in fontMap) {\n    var fonts = fontMap[fontName];\n    for (var lang in fonts) {\n      if (!buildOverrides) {\n        fontDefinitionCss += buildFontSet(fontName, fonts, lang);\n      } else {\n        // Set up the override for locale-specific font.\n        // la = language, sc = script, re = region; `la-RE` or `zh-Hans-HK`\n        var _lang$split = lang.split('-'),\n          _lang$split2 = _slicedToArray(_lang$split, 3),\n          la = _lang$split2[0],\n          sc = _lang$split2[1],\n          re = _lang$split2[2];\n\n        // if script is not specified, fall back to second part representing region\n        if (!re && sc && sc.length === 2) {\n          re = sc;\n          sc = null;\n        }\n        var matchesRegion = re ? re === region : true;\n        var matchesScript = sc ? sc === script : true;\n        if (la === language && matchesRegion && matchesScript) {\n          fontDefinitionCss += buildFontSet(fontName, fonts, lang, true);\n        }\n      }\n    }\n  }\n  return fontDefinitionCss;\n};\nvar insertFontDefinitionCss = function insertFontDefinitionCss(styleId, fontDefinitionCss) {\n  if (typeof document !== 'undefined') {\n    // Normal execution in a browser window\n    var styleElem = document.getElementById(styleId);\n    if (!styleElem) {\n      styleElem = document.createElement('style');\n      styleElem.setAttribute('id', styleId);\n      styleElem.setAttribute('type', 'text/css');\n      document.head.appendChild(styleElem);\n    }\n    styleElem.innerHTML = fontDefinitionCss;\n  } else {\n    var tag = \"<style type=\\\"text/css\\\" id=\\\"\".concat(styleId, \"\\\">\").concat(fontDefinitionCss, \"</style>\");\n\n    // We're rendering without the DOM; return the font definition stylesheet element string.\n    return tag;\n  }\n};\nfunction fontGenerator(locale) {\n  var styleId = 'localized-fonts';\n  if (typeof document !== 'undefined' && document.getElementById(styleId)) {\n    return;\n  }\n  return insertFontDefinitionCss(styleId, buildFontDefinitionCss(locale));\n}\nfunction fontOverrideGenerator(locale) {\n  return insertFontDefinitionCss('localized-fonts-override', buildFontDefinitionCss(locale, true));\n}\n\n/**\n * Generates locale-specific font rules allowing any locale to have its own custom font. Each\n * locale-font from the configuration block (defined in this file) is generated at run-time. If the\n * locale you're currently in is in the locale-font list an additional `@font-face` rule will be\n * generated that will override the standard font.\n *\n * In addition to the standard override-font being generated, named region-specific fonts are also\n * generated. This lets you incorporate language specific fonts when you're outside of one of those\n * regions; useful in a language list context where you want the name of each language to be\n * represented by that language's designated font.\n *\n * Below is example genarated-output of the Urdu (\"ur\") locale-font.\n *\n * ```css\n * &#64;font-face {\n * \tfont-family: 'Custom Font ur';\n * \tfont-weight: 500;\n * \tsrc: local('CustomFont_Urdu');\n * \tunicode-range: U+0600-U+06FF, U+FE70-U+FEFE, U+FB50-U+FDFF;\n * }\n * &#64;font-face {\n * \tfont-family: 'Custom Font ur Bold';\n * \tfont-weight: 700;\n * \tsrc: local('CustomFont_Urdu');\n * \tunicode-range: U+0600-U+06FF, U+FE70-U+FEFE, U+FB50-U+FDFF;\n * }\n * &#64;font-face {\n * \tfont-family: 'Custom Font ur Light';\n * \tfont-weight: 300;\n * \tsrc: local('CustomFont_Urdu');\n * \tunicode-range: U+0600-U+06FF, U+FE70-U+FEFE, U+FB50-U+FDFF;\n * }\n * ```\n *\n * @param {String} locale Locale string in the format\n * @returns {String} An HTML fragment of the `<style>` when prerendering\n *\n * @public\n */\nfunction generateFontRules(locale) {\n  if (!locale || locale === currentLocale) {\n    return;\n  }\n  currentLocale = locale;\n  return fontGenerator(locale);\n}\nfunction generateFontOverrideRules(locale) {\n  if (!locale) {\n    return;\n  }\n  return fontOverrideGenerator(locale);\n}\n\n/**\n * Adds a localed font to the font map\n *\n * ```\n * addLocalizedFont('My Theme Font', {\n *   'ur': {\n *      regular: 'My Theme Urdu',\n *      unicodeRange:\n *        'U+600-6FF,' +\n *        'U+FE70-FEFE,' +\n *        'U+FB50-FDFF'\n *    }\n * })\n * ```\n *\n * @param {String} name  Name of the font\n * @param {Object} fonts Object mapping font names and unicode ranges to locales\n *\n * @public\n */\nfunction addLocalizedFont(name, fonts) {\n  fontMap[name] = fonts;\n  if (currentLocale) {\n    fontGenerator(currentLocale);\n  }\n}\n\n/**\n * Removes a localized font from the font map\n *\n * @param   {String} name Name of the font\n *\n * @public\n */\nfunction removeLocalizedFont(name) {\n  delete fontMap[name];\n  if (currentLocale) {\n    fontGenerator(currentLocale);\n  }\n}\nmodule.exports = generateFontRules;\nmodule.exports.generateFontRules = generateFontRules;\nmodule.exports.generateFontOverrideRules = generateFontOverrideRules;\nmodule.exports.addLocalizedFont = addLocalizedFont;\nmodule.exports.removeLocalizedFont = removeLocalizedFont;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}