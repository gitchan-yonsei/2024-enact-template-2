"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = exports.OverlayBase = exports.Overlay = void 0;
var _kind = _interopRequireDefault(require("@enact/core/kind"));
var _Touchable = _interopRequireDefault(require("@enact/ui/Touchable"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _util = require("../internal/util");
var _VideoPlayerModule = _interopRequireDefault(require("./VideoPlayer.module.css"));
var _jsxRuntime = require("react/jsx-runtime");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); } /**
                                                                                                                                                                                                                                                                                                                                                                                           * Overlay {@link sandstone/VideoPlayer}. This covers the Video piece of the
                                                                                                                                                                                                                                                                                                                                                                                           * {@link sandstone/VideoPlayer} to prevent unnecessary VideoPlayer repaints due to mouse-moves.
                                                                                                                                                                                                                                                                                                                                                                                           * It also acts as a container for overlaid elements, like the {@link sandstone/Spinner}.
                                                                                                                                                                                                                                                                                                                                                                                           *
                                                                                                                                                                                                                                                                                                                                                                                           * @class Overlay
                                                                                                                                                                                                                                                                                                                                                                                           * @memberof sandstone/VideoPlayer
                                                                                                                                                                                                                                                                                                                                                                                           * @ui
                                                                                                                                                                                                                                                                                                                                                                                           * @private
                                                                                                                                                                                                                                                                                                                                                                                           */
var OverlayBase = (0, _kind["default"])({
  name: 'Overlay',
  propTypes: /** @lends sandstone/VideoPlayer.Overlay.prototype */{
    bottomControlsVisible: _propTypes["default"].bool,
    children: _propTypes["default"].node
  },
  styles: {
    css: _VideoPlayerModule["default"],
    className: 'overlay'
  },
  computed: {
    className: function className(_ref) {
      var bottomControlsVisible = _ref.bottomControlsVisible,
        styler = _ref.styler;
      return styler.append(_defineProperty({}, 'scrim', bottomControlsVisible));
    }
  },
  render: function render(props) {
    delete props.bottomControlsVisible;
    return /*#__PURE__*/(0, _jsxRuntime.jsx)("div", _objectSpread({}, props));
  }
});
exports.OverlayBase = OverlayBase;
var Overlay = (0, _util.onlyUpdateForProps)((0, _Touchable["default"])(OverlayBase), ['bottomControlsVisible', 'children']);
exports.Overlay = Overlay;
var _default = Overlay;
exports["default"] = _default;