"use strict";

require("@testing-library/jest-dom");
var _react = require("@testing-library/react");
var _userEvent = _interopRequireDefault(require("@testing-library/user-event"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _react2 = require("react");
var _kind = _interopRequireDefault(require("../kind"));
var _jsxRuntime = require("react/jsx-runtime");
var _excluded = ["contextValue", "label", "value"];
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _iterableToArrayLimit(arr, i) { var _i = null == arr ? null : "undefined" != typeof Symbol && arr[Symbol.iterator] || arr["@@iterator"]; if (null != _i) { var _s, _e, _x, _r, _arr = [], _n = !0, _d = !1; try { if (_x = (_i = _i.call(arr)).next, 0 === i) { if (Object(_i) !== _i) return; _n = !1; } else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0); } catch (err) { _d = !0, _e = err; } finally { try { if (!_n && null != _i["return"] && (_r = _i["return"](), Object(_r) !== _r)) return; } finally { if (_d) throw _e; } } return _arr; } }
function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }
function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }
function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }
describe('kind', function () {
  var TestContext = /*#__PURE__*/(0, _react2.createContext)({
    value: 'initial'
  });
  var Kind = (0, _kind["default"])({
    name: 'Kind',
    propTypes: {
      prop: _propTypes["default"].number.isRequired,
      label: _propTypes["default"].string
    },
    defaultProps: {
      label: 'Label'
    },
    contextType: TestContext,
    styles: {
      className: 'kind'
    },
    handlers: {
      onClick: function onClick(ev, props, context) {
        props.onClick(context.value);
      }
    },
    computed: {
      value: function value(_ref) {
        var prop = _ref.prop;
        return prop + 1;
      },
      contextValue: function contextValue(props, context) {
        return context ? "context".concat(context.value) : 'unknown';
      }
    },
    render: function render(_ref2) {
      var contextValue = _ref2.contextValue,
        label = _ref2.label,
        value = _ref2.value,
        rest = _objectWithoutProperties(_ref2, _excluded);
      delete rest.prop;
      return /*#__PURE__*/(0, _jsxRuntime.jsx)("div", _objectSpread(_objectSpread({}, rest), {}, {
        "data-context": contextValue,
        title: label,
        children: value
      }));
    }
  });
  test('should assign name to displayName', function () {
    var expected = 'Kind';
    var actual = Kind.displayName;
    expect(actual).toBe(expected);
  });
  test('should support undefined handlers', function () {
    var Minimal = (0, _kind["default"])({
      name: 'Minimal',
      render: function render() {
        return /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
          "data-testid": "minimal"
        });
      }
    });
    (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(Minimal, {}));
    var minimalDiv = _react.screen.queryByTestId('minimal');
    expect(minimalDiv).toBeInTheDocument();
  });
  test('should default {label} property', function () {
    var subject = /*#__PURE__*/(0, _jsxRuntime.jsx)(Kind, {
      prop: 1
    });
    var expected = 'Label';
    var actual = subject.props.label;
    expect(actual).toBe(expected);
  });
  test('should default {label} property when explicitly undefined', function () {
    // Explicitly testing for undefined
    // eslint-disable-next-line no-undefined
    var subject = /*#__PURE__*/(0, _jsxRuntime.jsx)(Kind, {
      label: undefined,
      prop: 1
    });
    var expected = 'Label';
    var actual = subject.props.label;
    expect(actual).toBe(expected);
  });
  test('should add className defined in styles', function () {
    (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(Kind, {
      prop: 1
    }));
    var expected = 'kind';
    var kindDiv = _react.screen.getByTitle('Label');
    expect(kindDiv).toHaveClass(expected);
  });
  test('should compute {value} property', function () {
    (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(Kind, {
      prop: 1
    }));
    var expected = '2';
    var kindDiv = _react.screen.getByTitle('Label');
    expect(kindDiv).toHaveTextContent(expected);
  });
  test('should support contextType in handlers', /*#__PURE__*/_asyncToGenerator(function* () {
    var onClick = jest.fn();
    var user = _userEvent["default"].setup();
    (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(Kind, {
      onClick: onClick,
      prop: 1
    }));
    var kindDiv = _react.screen.getByTitle('Label');
    yield user.click(kindDiv);
    var expected = 'initial';
    var actual = onClick.mock.calls[0][0];
    expect(actual).toBe(expected);
  }));
  test('should support contextType in computed', function () {
    (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(Kind, {
      prop: 1
    }));
    var expected = 'contextinitial';
    var kindDiv = _react.screen.getByTitle('Label');
    expect(kindDiv).toHaveAttribute('data-context', expected);
  });
  test('support using hooks within kind instances', /*#__PURE__*/_asyncToGenerator(function* () {
    var user = _userEvent["default"].setup();
    var Comp = (0, _kind["default"])({
      name: 'Comp',
      functional: true,
      render: function render() {
        // eslint-disable-next-line react-hooks/rules-of-hooks
        var _useState = (0, _react2.useState)(0),
          _useState2 = _slicedToArray(_useState, 2),
          state = _useState2[0],
          setState = _useState2[1];
        return /*#__PURE__*/(0, _jsxRuntime.jsx)("button", {
          "data-testid": "button",
          onClick: function onClick() {
            return setState(state + 1);
          },
          children: state
        });
      }
    });
    (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(Comp, {}));
    var button = _react.screen.getByTestId('button');
    yield user.click(button);
    var expected = '1';
    expect(button).toHaveTextContent(expected);
  }));
  describe('inline', function () {
    test('should support a minimal kind', function () {
      var Minimal = (0, _kind["default"])({
        name: 'Minimal',
        render: function render() {
          return /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {});
        }
      });
      var component = Minimal.inline();
      var expected = 'div';
      var actual = component.type;
      expect(actual).toBe(expected);
    });
    test('should set default props when prop is not passed', function () {
      var component = Kind.inline();

      // since we're inlining the output, we have to reference where the label prop lands --
      // the title prop of the <div> -- rather than the label prop on the component (which
      // doesn't exist due to inlining).
      var expected = 'Label';
      var actual = component.props.title;
      expect(actual).toBe(expected);
    });
    test('should set default props when passed prop is undefined', function () {
      var component = Kind.inline({
        // explicitly testing settings undefined in this test case
        // eslint-disable-next-line no-undefined
        label: undefined
      });
      var expected = 'Label';
      var actual = component.props.title;
      expect(actual).toBe(expected);
    });
    test('should include handlers', function () {
      var component = Kind.inline();
      var expected = 'function';
      var actual = typeof component.props.onClick;
      expect(actual).toBe(expected);
    });
    test('should not support context', function () {
      var component = Kind.inline();
      var expected = 'unknown';
      var actual = component.props['data-context'];
      expect(actual).toBe(expected);
    });
  });
});